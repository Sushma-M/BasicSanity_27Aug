/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.time.LocalDateTime;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * JoiningDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Joining Details`")
public class JoiningDetails implements Serializable {

    private Integer userId;
    private Integer accountId;
    private Date joinedDate;
    private LocalDateTime joinedDatetime;
    private Time workTime;
    private Long startUpSalary;
    private Float hike;
    private Short teamSize;
    private BigInteger leavesTaken;
    private Byte byteColumn;
    private String userDetails;
    private UserDetails userDetailsByUserDetails;
    private Users users;
    private SalaryDetails salaryDetails;

    @Id
    @Column(name = "`User Id`", nullable = false, scale = 0, precision = 10)
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "`Account Id`", nullable = true, scale = 0, precision = 10)
    public Integer getAccountId() {
        return this.accountId;
    }

    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    @Column(name = "`Joined Date`", nullable = true)
    public Date getJoinedDate() {
        return this.joinedDate;
    }

    public void setJoinedDate(Date joinedDate) {
        this.joinedDate = joinedDate;
    }

    @Column(name = "`Joined Datetime`", nullable = true)
    public LocalDateTime getJoinedDatetime() {
        return this.joinedDatetime;
    }

    public void setJoinedDatetime(LocalDateTime joinedDatetime) {
        this.joinedDatetime = joinedDatetime;
    }

    @Column(name = "`Work Time`", nullable = true)
    public Time getWorkTime() {
        return this.workTime;
    }

    public void setWorkTime(Time workTime) {
        this.workTime = workTime;
    }

    @Column(name = "`StartUp Salary`", nullable = true, scale = 0, precision = 17)
    public Long getStartUpSalary() {
        return this.startUpSalary;
    }

    public void setStartUpSalary(Long startUpSalary) {
        this.startUpSalary = startUpSalary;
    }

    @Column(name = "`Hike`", nullable = true, scale = 4, precision = 6)
    public Float getHike() {
        return this.hike;
    }

    public void setHike(Float hike) {
        this.hike = hike;
    }

    @Column(name = "`Team Size`", nullable = true, scale = 0, precision = 4)
    public Short getTeamSize() {
        return this.teamSize;
    }

    public void setTeamSize(Short teamSize) {
        this.teamSize = teamSize;
    }

    @Column(name = "`Leaves Taken`", nullable = true, scale = 0, precision = 20)
    public BigInteger getLeavesTaken() {
        return this.leavesTaken;
    }

    public void setLeavesTaken(BigInteger leavesTaken) {
        this.leavesTaken = leavesTaken;
    }

    @Column(name = "`Byte Column`", nullable = true, scale = 0, precision = 2)
    public Byte getByteColumn() {
        return this.byteColumn;
    }

    public void setByteColumn(Byte byteColumn) {
        this.byteColumn = byteColumn;
    }

    @Column(name = "`User Details`", nullable = true, length = 255)
    public String getUserDetails() {
        return this.userDetails;
    }

    public void setUserDetails(String userDetails) {
        this.userDetails = userDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`User Details`", referencedColumnName = "`UserData Id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_Joining_Details_TO_Useb8K0`"))
    @Fetch(FetchMode.JOIN)
    public UserDetails getUserDetailsByUserDetails() {
        return this.userDetailsByUserDetails;
    }

    public void setUserDetailsByUserDetails(UserDetails userDetailsByUserDetails) {
        if(userDetailsByUserDetails != null) {
            this.userDetails = userDetailsByUserDetails.getUserDataId();
        }

        this.userDetailsByUserDetails = userDetailsByUserDetails;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`User Id`", referencedColumnName = "`Users`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_Joining_Details_TO_UsMMdCg`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getUsers();
        }

        this.users = users;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Account Id`", referencedColumnName = "`Account ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_Salary_Details_TO_JoivlEgi`"))
    @Fetch(FetchMode.JOIN)
    public SalaryDetails getSalaryDetails() {
        return this.salaryDetails;
    }

    public void setSalaryDetails(SalaryDetails salaryDetails) {
        if(salaryDetails != null) {
            this.accountId = salaryDetails.getAccountId();
        }

        this.salaryDetails = salaryDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof JoiningDetails)) return false;
        final JoiningDetails joiningDetails = (JoiningDetails) o;
        return Objects.equals(getUserId(), joiningDetails.getUserId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUserId());
    }
}