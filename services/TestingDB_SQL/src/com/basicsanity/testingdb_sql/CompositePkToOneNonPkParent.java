/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * CompositePkToOneNonPkParent generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Composite PK to One Non Pk Parent`")
@IdClass(CompositePkToOneNonPkParentId.class)
public class CompositePkToOneNonPkParent implements Serializable {

    private Date createdDate;
    private Integer compositeId;
    private BigDecimal bigDecimalColumn;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] blobColumn;

    @Id
    @Column(name = "`Created Date`", nullable = false)
    public Date getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Id
    @Column(name = "`Composite ID`", nullable = false, scale = 0, precision = 10)
    public Integer getCompositeId() {
        return this.compositeId;
    }

    public void setCompositeId(Integer compositeId) {
        this.compositeId = compositeId;
    }

    @Column(name = "`BigDecimal Column`", nullable = true, scale = 16, precision = 38)
    public BigDecimal getBigDecimalColumn() {
        return this.bigDecimalColumn;
    }

    public void setBigDecimalColumn(BigDecimal bigDecimalColumn) {
        this.bigDecimalColumn = bigDecimalColumn;
    }

    @Column(name = "`Blob Column`", nullable = true)
    public byte[] getBlobColumn() {
        return this.blobColumn;
    }

    public void setBlobColumn(byte[] blobColumn) {
        this.blobColumn = blobColumn;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CompositePkToOneNonPkParent)) return false;
        final CompositePkToOneNonPkParent compositePkToOneNonPkParent = (CompositePkToOneNonPkParent) o;
        return Objects.equals(getCreatedDate(), compositePkToOneNonPkParent.getCreatedDate()) &&
                Objects.equals(getCompositeId(), compositePkToOneNonPkParent.getCompositeId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCreatedDate(),
                getCompositeId());
    }
}