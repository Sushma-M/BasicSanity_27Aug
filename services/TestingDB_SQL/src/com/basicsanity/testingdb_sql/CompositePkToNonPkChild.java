/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * CompositePkToNonPkChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Composite PK to Non PK Child`")
public class CompositePkToNonPkChild implements Serializable {

    private Integer compositeChildId;
    private String compName;
    private Date createdDate;
    private String timeColumn;
    private String compDesc;
    private CompositePkToOneNonPkParent compositePkToOneNonPkParent;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`Composite Child ID`", nullable = false, scale = 0, precision = 10)
    public Integer getCompositeChildId() {
        return this.compositeChildId;
    }

    public void setCompositeChildId(Integer compositeChildId) {
        this.compositeChildId = compositeChildId;
    }

    @Column(name = "`Comp Name`", nullable = true, length = 255)
    public String getCompName() {
        return this.compName;
    }

    public void setCompName(String compName) {
        this.compName = compName;
    }

    @Column(name = "`Created Date`", nullable = true)
    public Date getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "`Time Column`", nullable = true, length = 255)
    public String getTimeColumn() {
        return this.timeColumn;
    }

    public void setTimeColumn(String timeColumn) {
        this.timeColumn = timeColumn;
    }

    @Column(name = "`Comp Desc`", nullable = true, length = 2147483647)
    public String getCompDesc() {
        return this.compDesc;
    }

    public void setCompDesc(String compDesc) {
        this.compDesc = compDesc;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`Composite Child ID`", referencedColumnName = "`Composite ID`", insertable = false, updatable = false),
            @JoinColumn(name = "`Created Date`", referencedColumnName = "`Created Date`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_Composite_PK_to_One_NHIGZT`"))
    @Fetch(FetchMode.JOIN)
    public CompositePkToOneNonPkParent getCompositePkToOneNonPkParent() {
        return this.compositePkToOneNonPkParent;
    }

    public void setCompositePkToOneNonPkParent(CompositePkToOneNonPkParent compositePkToOneNonPkParent) {
        if(compositePkToOneNonPkParent != null) {
            this.compositeChildId = compositePkToOneNonPkParent.getCompositeId();
            this.createdDate = compositePkToOneNonPkParent.getCreatedDate();
        }

        this.compositePkToOneNonPkParent = compositePkToOneNonPkParent;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CompositePkToNonPkChild)) return false;
        final CompositePkToNonPkChild compositePkToNonPkChild = (CompositePkToNonPkChild) o;
        return Objects.equals(getCompositeChildId(), compositePkToNonPkChild.getCompositeChildId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCompositeChildId());
    }
}