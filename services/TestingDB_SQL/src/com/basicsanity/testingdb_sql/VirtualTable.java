/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

/**
 * VirtualTable generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Virtual Table`")
@IdClass(VirtualTableId.class)
public class VirtualTable implements Serializable {

    private Integer id;
    private String description;
    private String testColumn;
    private String name;

    @Id
    @Column(name = "`Id`", nullable = true, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Id
    @Column(name = "`Description`", nullable = true, length = 2551)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Id
    @Column(name = "`test Column`", nullable = true, length = 255)
    public String getTestColumn() {
        return this.testColumn;
    }

    public void setTestColumn(String testColumn) {
        this.testColumn = testColumn;
    }

    @Id
    @Column(name = "`Name`", nullable = true, length = 20)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof VirtualTable)) return false;
        final VirtualTable virtualTable = (VirtualTable) o;
        return Objects.equals(getId(), virtualTable.getId()) &&
                Objects.equals(getDescription(), virtualTable.getDescription()) &&
                Objects.equals(getTestColumn(), virtualTable.getTestColumn()) &&
                Objects.equals(getName(), virtualTable.getName());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(),
                getDescription(),
                getTestColumn(),
                getName());
    }
}