/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * VirtualOneToManyChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Virtual One to Many Child`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_Virtual_One_to_Many_CIecvx`", columnNames = {"`Virtual Child ID`"})})
@IdClass(VirtualOneToManyChildId.class)
public class VirtualOneToManyChild implements Serializable {

    private String virtualChildId;
    private String createdBy;
    private Date virtualParentId;

    @Id
    @Column(name = "`Virtual Child ID`", nullable = true, length = 255)
    public String getVirtualChildId() {
        return this.virtualChildId;
    }

    public void setVirtualChildId(String virtualChildId) {
        this.virtualChildId = virtualChildId;
    }

    @Id
    @Column(name = "`Created By`", nullable = true, length = 255)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Id
    @Column(name = "`Virtual Parent ID`", nullable = true)
    public Date getVirtualParentId() {
        return this.virtualParentId;
    }

    public void setVirtualParentId(Date virtualParentId) {
        this.virtualParentId = virtualParentId;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof VirtualOneToManyChild)) return false;
        final VirtualOneToManyChild virtualOneToManyChild = (VirtualOneToManyChild) o;
        return Objects.equals(getVirtualChildId(), virtualOneToManyChild.getVirtualChildId()) &&
                Objects.equals(getCreatedBy(), virtualOneToManyChild.getCreatedBy()) &&
                Objects.equals(getVirtualParentId(), virtualOneToManyChild.getVirtualParentId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getVirtualChildId(),
                getCreatedBy(),
                getVirtualParentId());
    }
}