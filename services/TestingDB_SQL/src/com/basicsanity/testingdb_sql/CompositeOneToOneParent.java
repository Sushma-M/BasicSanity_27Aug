/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;

/**
 * CompositeOneToOneParent generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Composite One To One Parent`")
@IdClass(CompositeOneToOneParentId.class)
public class CompositeOneToOneParent implements Serializable {

    private Integer compId;
    private String compName;
    private String createdBy;
    private Boolean isAuth;

    @Id
    @Column(name = "`Comp Id`", nullable = false, scale = 0, precision = 10)
    public Integer getCompId() {
        return this.compId;
    }

    public void setCompId(Integer compId) {
        this.compId = compId;
    }

    @Id
    @Column(name = "`Comp Name`", nullable = false, length = 255)
    public String getCompName() {
        return this.compName;
    }

    public void setCompName(String compName) {
        this.compName = compName;
    }

    @Column(name = "`Created By`", nullable = true, length = 255)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`Is Auth`", nullable = true)
    public Boolean getIsAuth() {
        return this.isAuth;
    }

    public void setIsAuth(Boolean isAuth) {
        this.isAuth = isAuth;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CompositeOneToOneParent)) return false;
        final CompositeOneToOneParent compositeOneToOneParent = (CompositeOneToOneParent) o;
        return Objects.equals(getCompId(), compositeOneToOneParent.getCompId()) &&
                Objects.equals(getCompName(), compositeOneToOneParent.getCompName());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCompId(),
                getCompName());
    }
}