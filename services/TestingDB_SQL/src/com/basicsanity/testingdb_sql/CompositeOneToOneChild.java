/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.sql.Time;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * CompositeOneToOneChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Composite One to One child`")
@IdClass(CompositeOneToOneParentId.class)
public class CompositeOneToOneChild implements Serializable {

    private Integer compId;
    private String compName;
    private String compDesc;
    private Date createdDate;
    private Time createdTime;
    private CompositeOneToOneParent compositeOneToOneParent;

    @Id
    @Column(name = "`Comp Id`", nullable = false, scale = 0, precision = 10)
    public Integer getCompId() {
        return this.compId;
    }

    public void setCompId(Integer compId) {
        this.compId = compId;
    }

    @Id
    @Column(name = "`Comp Name`", nullable = false, length = 255)
    public String getCompName() {
        return this.compName;
    }

    public void setCompName(String compName) {
        this.compName = compName;
    }

    @Column(name = "`Comp Desc`", nullable = true, length = 2147483647)
    public String getCompDesc() {
        return this.compDesc;
    }

    public void setCompDesc(String compDesc) {
        this.compDesc = compDesc;
    }

    @Column(name = "`Created Date`", nullable = true)
    public Date getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "`Created Time`", nullable = true)
    public Time getCreatedTime() {
        return this.createdTime;
    }

    public void setCreatedTime(Time createdTime) {
        this.createdTime = createdTime;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`Comp Id`", referencedColumnName = "`Comp Id`", insertable = false, updatable = false),
            @JoinColumn(name = "`Comp Name`", referencedColumnName = "`Comp Name`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_Composite_One_to_One_Rj4Up`"))
    @Fetch(FetchMode.JOIN)
    public CompositeOneToOneParent getCompositeOneToOneParent() {
        return this.compositeOneToOneParent;
    }

    public void setCompositeOneToOneParent(CompositeOneToOneParent compositeOneToOneParent) {
        if(compositeOneToOneParent != null) {
            this.compId = compositeOneToOneParent.getCompId();
            this.compName = compositeOneToOneParent.getCompName();
        }

        this.compositeOneToOneParent = compositeOneToOneParent;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CompositeOneToOneChild)) return false;
        final CompositeOneToOneChild compositeOneToOneChild = (CompositeOneToOneChild) o;
        return Objects.equals(getCompId(), compositeOneToOneChild.getCompId()) &&
                Objects.equals(getCompName(), compositeOneToOneChild.getCompName());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCompId(),
                getCompName());
    }
}