/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * ManyToOneChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ManyToOne Child`")
public class ManyToOneChild implements Serializable {

    private Integer childPk;
    private String characterColumn;
    private String pkColumn;
    private ManyToOneParent manyToOneParent;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`Child PK`", nullable = false, scale = 0, precision = 10)
    public Integer getChildPk() {
        return this.childPk;
    }

    public void setChildPk(Integer childPk) {
        this.childPk = childPk;
    }

    @Column(name = "`Character Column`", nullable = true, length = 1)
    public String getCharacterColumn() {
        return this.characterColumn;
    }

    public void setCharacterColumn(String characterColumn) {
        this.characterColumn = characterColumn;
    }

    @Column(name = "`PK Column`", nullable = true, length = 255)
    public String getPkColumn() {
        return this.pkColumn;
    }

    public void setPkColumn(String pkColumn) {
        this.pkColumn = pkColumn;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PK Column`", referencedColumnName = "`PK Column`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_ManyToOne_Child_TO_MaeLjtd`"))
    @Fetch(FetchMode.JOIN)
    public ManyToOneParent getManyToOneParent() {
        return this.manyToOneParent;
    }

    public void setManyToOneParent(ManyToOneParent manyToOneParent) {
        if(manyToOneParent != null) {
            this.pkColumn = manyToOneParent.getPkColumn();
        }

        this.manyToOneParent = manyToOneParent;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ManyToOneChild)) return false;
        final ManyToOneChild manyToOneChild = (ManyToOneChild) o;
        return Objects.equals(getChildPk(), manyToOneChild.getChildPk());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getChildPk());
    }
}