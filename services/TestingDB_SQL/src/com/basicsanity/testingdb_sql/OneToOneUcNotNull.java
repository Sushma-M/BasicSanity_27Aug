/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * OneToOneUcNotNull generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`OneToOne UC NotNull`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_TABLE10_COLUMN3`", columnNames = {"`COLUMN3`"})})
public class OneToOneUcNotNull implements Serializable {

    private Integer id;
    private String column2;
    private int column3;
    private OneToOneUpNotNull oneToOneUpNotNull;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`COLUMN2`", nullable = true, length = 255)
    public String getColumn2() {
        return this.column2;
    }

    public void setColumn2(String column2) {
        this.column2 = column2;
    }

    @Column(name = "`COLUMN3`", nullable = false, scale = 0, precision = 10)
    public int getColumn3() {
        return this.column3;
    }

    public void setColumn3(int column3) {
        this.column3 = column3;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN3`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_OneToOne_UC_NotNull_TPFpCN`"))
    @Fetch(FetchMode.JOIN)
    public OneToOneUpNotNull getOneToOneUpNotNull() {
        return this.oneToOneUpNotNull;
    }

    public void setOneToOneUpNotNull(OneToOneUpNotNull oneToOneUpNotNull) {
        if(oneToOneUpNotNull != null) {
            this.column3 = oneToOneUpNotNull.getId();
        }

        this.oneToOneUpNotNull = oneToOneUpNotNull;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OneToOneUcNotNull)) return false;
        final OneToOneUcNotNull oneToOneUcNotNull = (OneToOneUcNotNull) o;
        return Objects.equals(getId(), oneToOneUcNotNull.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}