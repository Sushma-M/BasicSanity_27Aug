/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * OneToOneUc generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`OneToOne UC`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_OneToOne_UC_Unique_PauGCBh`", columnNames = {"`Unique Parent Id`"})})
public class OneToOneUc implements Serializable {

    private Integer pkColumn;
    private String stringColumn;
    private Integer uniqueParentId;
    private OneToOneUp oneToOneUp;

    @Id
    @Column(name = "`PK Column`", nullable = false, scale = 0, precision = 10)
    public Integer getPkColumn() {
        return this.pkColumn;
    }

    public void setPkColumn(Integer pkColumn) {
        this.pkColumn = pkColumn;
    }

    @Column(name = "`String Column`", nullable = true, length = 255)
    public String getStringColumn() {
        return this.stringColumn;
    }

    public void setStringColumn(String stringColumn) {
        this.stringColumn = stringColumn;
    }

    @Column(name = "`Unique Parent Id`", nullable = true, scale = 0, precision = 10)
    public Integer getUniqueParentId() {
        return this.uniqueParentId;
    }

    public void setUniqueParentId(Integer uniqueParentId) {
        this.uniqueParentId = uniqueParentId;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Unique Parent Id`", referencedColumnName = "`PK Column`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_OneToOne_UC_TO_OneToO13JQR`"))
    @Fetch(FetchMode.JOIN)
    public OneToOneUp getOneToOneUp() {
        return this.oneToOneUp;
    }

    public void setOneToOneUp(OneToOneUp oneToOneUp) {
        if(oneToOneUp != null) {
            this.uniqueParentId = oneToOneUp.getPkColumn();
        }

        this.oneToOneUp = oneToOneUp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OneToOneUc)) return false;
        final OneToOneUc oneToOneUc = (OneToOneUc) o;
        return Objects.equals(getPkColumn(), oneToOneUc.getPkColumn());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPkColumn());
    }
}