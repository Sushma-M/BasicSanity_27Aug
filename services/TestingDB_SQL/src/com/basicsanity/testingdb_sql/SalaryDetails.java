/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigInteger;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * SalaryDetails generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Salary Details`")
public class SalaryDetails implements Serializable {

    private Integer accountId;
    private BigInteger pfNo;
    private String panNo;
    private Long pay;
    private Integer userId;
    private String userDetailsId;
    private UserDetails userDetails;
    private Users users;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`Account ID`", nullable = false, scale = 0, precision = 10)
    public Integer getAccountId() {
        return this.accountId;
    }

    public void setAccountId(Integer accountId) {
        this.accountId = accountId;
    }

    @Column(name = "`PF NO`", nullable = true, scale = 0, precision = 38)
    public BigInteger getPfNo() {
        return this.pfNo;
    }

    public void setPfNo(BigInteger pfNo) {
        this.pfNo = pfNo;
    }

    @Column(name = "`Pan NO`", nullable = true, length = 255)
    public String getPanNo() {
        return this.panNo;
    }

    public void setPanNo(String panNo) {
        this.panNo = panNo;
    }

    @Column(name = "`Pay`", nullable = true, scale = 0, precision = 16)
    public Long getPay() {
        return this.pay;
    }

    public void setPay(Long pay) {
        this.pay = pay;
    }

    @Column(name = "`User Id`", nullable = true, scale = 0, precision = 10)
    public Integer getUserId() {
        return this.userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Column(name = "`User Details Id`", nullable = true, length = 255)
    public String getUserDetailsId() {
        return this.userDetailsId;
    }

    public void setUserDetailsId(String userDetailsId) {
        this.userDetailsId = userDetailsId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`User Details Id`", referencedColumnName = "`UserData Id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_User_Details_TO_SalardWNGa`"))
    @Fetch(FetchMode.JOIN)
    public UserDetails getUserDetails() {
        return this.userDetails;
    }

    public void setUserDetails(UserDetails userDetails) {
        if(userDetails != null) {
            this.userDetailsId = userDetails.getUserDataId();
        }

        this.userDetails = userDetails;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`User Id`", referencedColumnName = "`Users`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_Users_TO_Salary_Detai8T0KU`"))
    @Fetch(FetchMode.JOIN)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.userId = users.getUsers();
        }

        this.users = users;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof SalaryDetails)) return false;
        final SalaryDetails salaryDetails = (SalaryDetails) o;
        return Objects.equals(getAccountId(), salaryDetails.getAccountId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getAccountId());
    }
}