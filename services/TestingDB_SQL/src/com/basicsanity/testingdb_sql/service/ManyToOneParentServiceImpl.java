/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.ManyToOneChild;
import com.basicsanity.testingdb_sql.ManyToOneParent;


/**
 * ServiceImpl object for domain model class ManyToOneParent.
 *
 * @see ManyToOneParent
 */
@Service("TestingDB_SQL.ManyToOneParentService")
@Validated
public class ManyToOneParentServiceImpl implements ManyToOneParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ManyToOneParentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.ManyToOneChildService")
    private ManyToOneChildService manyToOneChildService;

    @Autowired
    @Qualifier("TestingDB_SQL.ManyToOneParentDao")
    private WMGenericDao<ManyToOneParent, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ManyToOneParent, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneParent create(ManyToOneParent manyToOneParent) {
        LOGGER.debug("Creating a new ManyToOneParent with information: {}", manyToOneParent);

        ManyToOneParent manyToOneParentCreated = this.wmGenericDao.create(manyToOneParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(manyToOneParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneParent getById(String manytooneparentId) {
        LOGGER.debug("Finding ManyToOneParent by id: {}", manytooneparentId);
        return this.wmGenericDao.findById(manytooneparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneParent findById(String manytooneparentId) {
        LOGGER.debug("Finding ManyToOneParent by id: {}", manytooneparentId);
        try {
            return this.wmGenericDao.findById(manytooneparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ManyToOneParent found with id: {}", manytooneparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<ManyToOneParent> findByMultipleIds(List<String> manytooneparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding ManyToOneParents by ids: {}", manytooneparentIds);

        return this.wmGenericDao.findByMultipleIds(manytooneparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneParent update(ManyToOneParent manyToOneParent) {
        LOGGER.debug("Updating ManyToOneParent with information: {}", manyToOneParent);

        this.wmGenericDao.update(manyToOneParent);
        this.wmGenericDao.refresh(manyToOneParent);

        return manyToOneParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneParent delete(String manytooneparentId) {
        LOGGER.debug("Deleting ManyToOneParent with id: {}", manytooneparentId);
        ManyToOneParent deleted = this.wmGenericDao.findById(manytooneparentId);
        if (deleted == null) {
            LOGGER.debug("No ManyToOneParent found with id: {}", manytooneparentId);
            throw new EntityNotFoundException(String.valueOf(manytooneparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(ManyToOneParent manyToOneParent) {
        LOGGER.debug("Deleting ManyToOneParent with {}", manyToOneParent);
        this.wmGenericDao.delete(manyToOneParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<ManyToOneParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ManyToOneParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<ManyToOneParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ManyToOneParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table ManyToOneParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table ManyToOneParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<ManyToOneChild> findAssociatedManyToOneChilds(String pkColumn, Pageable pageable) {
        LOGGER.debug("Fetching all associated manyToOneChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("manyToOneParent.pkColumn = '" + pkColumn + "'");

        return manyToOneChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ManyToOneChildService instance
     */
    protected void setManyToOneChildService(ManyToOneChildService service) {
        this.manyToOneChildService = service;
    }

}