/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.AllTypesTable;

/**
 * Service object for domain model class {@link AllTypesTable}.
 */
public interface AllTypesTableService {

    /**
     * Creates a new AllTypesTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AllTypesTable if any.
     *
     * @param allTypesTable Details of the AllTypesTable to be created; value cannot be null.
     * @return The newly created AllTypesTable.
     */
    AllTypesTable create(@Valid AllTypesTable allTypesTable);


	/**
     * Returns AllTypesTable by given id if exists.
     *
     * @param alltypestableId The id of the AllTypesTable to get; value cannot be null.
     * @return AllTypesTable associated with the given alltypestableId.
	 * @throws EntityNotFoundException If no AllTypesTable is found.
     */
    AllTypesTable getById(Integer alltypestableId);

    /**
     * Find and return the AllTypesTable by given id if exists, returns null otherwise.
     *
     * @param alltypestableId The id of the AllTypesTable to get; value cannot be null.
     * @return AllTypesTable associated with the given alltypestableId.
     */
    AllTypesTable findById(Integer alltypestableId);

	/**
     * Find and return the list of AllTypesTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param alltypestableIds The id's of the AllTypesTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AllTypesTables associated with the given alltypestableIds.
     */
    List<AllTypesTable> findByMultipleIds(List<Integer> alltypestableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AllTypesTable. It replaces all fields of the existing AllTypesTable with the given allTypesTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AllTypesTable if any.
     *
     * @param allTypesTable The details of the AllTypesTable to be updated; value cannot be null.
     * @return The updated AllTypesTable.
     * @throws EntityNotFoundException if no AllTypesTable is found with given input.
     */
    AllTypesTable update(@Valid AllTypesTable allTypesTable);

    /**
     * Deletes an existing AllTypesTable with the given id.
     *
     * @param alltypestableId The id of the AllTypesTable to be deleted; value cannot be null.
     * @return The deleted AllTypesTable.
     * @throws EntityNotFoundException if no AllTypesTable found with the given id.
     */
    AllTypesTable delete(Integer alltypestableId);

    /**
     * Deletes an existing AllTypesTable with the given object.
     *
     * @param allTypesTable The instance of the AllTypesTable to be deleted; value cannot be null.
     */
    void delete(AllTypesTable allTypesTable);

    /**
     * Find all AllTypesTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AllTypesTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AllTypesTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AllTypesTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AllTypesTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<AllTypesTable> findAll(String query, Pageable pageable);

    /**
     * Exports all AllTypesTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AllTypesTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AllTypesTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AllTypesTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}