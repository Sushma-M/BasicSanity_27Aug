/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.ManyToOneChild;


/**
 * ServiceImpl object for domain model class ManyToOneChild.
 *
 * @see ManyToOneChild
 */
@Service("TestingDB_SQL.ManyToOneChildService")
@Validated
public class ManyToOneChildServiceImpl implements ManyToOneChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ManyToOneChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.ManyToOneChildDao")
    private WMGenericDao<ManyToOneChild, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ManyToOneChild, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneChild create(ManyToOneChild manyToOneChild) {
        LOGGER.debug("Creating a new ManyToOneChild with information: {}", manyToOneChild);

        ManyToOneChild manyToOneChildCreated = this.wmGenericDao.create(manyToOneChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(manyToOneChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneChild getById(Integer manytoonechildId) {
        LOGGER.debug("Finding ManyToOneChild by id: {}", manytoonechildId);
        return this.wmGenericDao.findById(manytoonechildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneChild findById(Integer manytoonechildId) {
        LOGGER.debug("Finding ManyToOneChild by id: {}", manytoonechildId);
        try {
            return this.wmGenericDao.findById(manytoonechildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No ManyToOneChild found with id: {}", manytoonechildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<ManyToOneChild> findByMultipleIds(List<Integer> manytoonechildIds, boolean orderedReturn) {
        LOGGER.debug("Finding ManyToOneChilds by ids: {}", manytoonechildIds);

        return this.wmGenericDao.findByMultipleIds(manytoonechildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneChild update(ManyToOneChild manyToOneChild) {
        LOGGER.debug("Updating ManyToOneChild with information: {}", manyToOneChild);

        this.wmGenericDao.update(manyToOneChild);
        this.wmGenericDao.refresh(manyToOneChild);

        return manyToOneChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public ManyToOneChild delete(Integer manytoonechildId) {
        LOGGER.debug("Deleting ManyToOneChild with id: {}", manytoonechildId);
        ManyToOneChild deleted = this.wmGenericDao.findById(manytoonechildId);
        if (deleted == null) {
            LOGGER.debug("No ManyToOneChild found with id: {}", manytoonechildId);
            throw new EntityNotFoundException(String.valueOf(manytoonechildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(ManyToOneChild manyToOneChild) {
        LOGGER.debug("Deleting ManyToOneChild with {}", manyToOneChild);
        this.wmGenericDao.delete(manyToOneChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<ManyToOneChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ManyToOneChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<ManyToOneChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ManyToOneChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table ManyToOneChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table ManyToOneChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}