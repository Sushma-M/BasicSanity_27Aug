/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOneToManyChild;
import com.basicsanity.testingdb_sql.VirtualOneToManyChildId;

/**
 * Service object for domain model class {@link VirtualOneToManyChild}.
 */
public interface VirtualOneToManyChildService {

    /**
     * Creates a new VirtualOneToManyChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualOneToManyChild if any.
     *
     * @param virtualOneToManyChild Details of the VirtualOneToManyChild to be created; value cannot be null.
     * @return The newly created VirtualOneToManyChild.
     */
    VirtualOneToManyChild create(@Valid VirtualOneToManyChild virtualOneToManyChild);


	/**
     * Returns VirtualOneToManyChild by given id if exists.
     *
     * @param virtualonetomanychildId The id of the VirtualOneToManyChild to get; value cannot be null.
     * @return VirtualOneToManyChild associated with the given virtualonetomanychildId.
	 * @throws EntityNotFoundException If no VirtualOneToManyChild is found.
     */
    VirtualOneToManyChild getById(VirtualOneToManyChildId virtualonetomanychildId);

    /**
     * Find and return the VirtualOneToManyChild by given id if exists, returns null otherwise.
     *
     * @param virtualonetomanychildId The id of the VirtualOneToManyChild to get; value cannot be null.
     * @return VirtualOneToManyChild associated with the given virtualonetomanychildId.
     */
    VirtualOneToManyChild findById(VirtualOneToManyChildId virtualonetomanychildId);

	/**
     * Find and return the list of VirtualOneToManyChilds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param virtualonetomanychildIds The id's of the VirtualOneToManyChild to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VirtualOneToManyChilds associated with the given virtualonetomanychildIds.
     */
    List<VirtualOneToManyChild> findByMultipleIds(List<VirtualOneToManyChildId> virtualonetomanychildIds, boolean orderedReturn);

    /**
     * Find and return the VirtualOneToManyChild for given virtualChildId  if exists.
     *
     * @param virtualChildId value of virtualChildId; value cannot be null.
     * @return VirtualOneToManyChild associated with the given inputs.
     * @throws EntityNotFoundException if no matching VirtualOneToManyChild found.
     */
    VirtualOneToManyChild getByVirtualChildId(String virtualChildId);

    /**
     * Updates the details of an existing VirtualOneToManyChild. It replaces all fields of the existing VirtualOneToManyChild with the given virtualOneToManyChild.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualOneToManyChild if any.
     *
     * @param virtualOneToManyChild The details of the VirtualOneToManyChild to be updated; value cannot be null.
     * @return The updated VirtualOneToManyChild.
     * @throws EntityNotFoundException if no VirtualOneToManyChild is found with given input.
     */
    VirtualOneToManyChild update(@Valid VirtualOneToManyChild virtualOneToManyChild);

    /**
     * Deletes an existing VirtualOneToManyChild with the given id.
     *
     * @param virtualonetomanychildId The id of the VirtualOneToManyChild to be deleted; value cannot be null.
     * @return The deleted VirtualOneToManyChild.
     * @throws EntityNotFoundException if no VirtualOneToManyChild found with the given id.
     */
    VirtualOneToManyChild delete(VirtualOneToManyChildId virtualonetomanychildId);

    /**
     * Deletes an existing VirtualOneToManyChild with the given object.
     *
     * @param virtualOneToManyChild The instance of the VirtualOneToManyChild to be deleted; value cannot be null.
     */
    void delete(VirtualOneToManyChild virtualOneToManyChild);

    /**
     * Find all VirtualOneToManyChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualOneToManyChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VirtualOneToManyChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VirtualOneToManyChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualOneToManyChilds.
     *
     * @see Pageable
     * @see Page
     */
    Page<VirtualOneToManyChild> findAll(String query, Pageable pageable);

    /**
     * Exports all VirtualOneToManyChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VirtualOneToManyChilds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VirtualOneToManyChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VirtualOneToManyChild.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}