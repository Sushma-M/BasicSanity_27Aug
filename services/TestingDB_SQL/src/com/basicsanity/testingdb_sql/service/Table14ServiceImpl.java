/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table14;
import com.basicsanity.testingdb_sql.Table14Id;


/**
 * ServiceImpl object for domain model class Table14.
 *
 * @see Table14
 */
@Service("TestingDB_SQL.Table14Service")
@Validated
public class Table14ServiceImpl implements Table14Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table14ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.Table14Dao")
    private WMGenericDao<Table14, Table14Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table14, Table14Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table14 create(Table14 table14) {
        LOGGER.debug("Creating a new Table14 with information: {}", table14);

        Table14 table14Created = this.wmGenericDao.create(table14);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table14Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table14 getById(Table14Id table14Id) {
        LOGGER.debug("Finding Table14 by id: {}", table14Id);
        return this.wmGenericDao.findById(table14Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table14 findById(Table14Id table14Id) {
        LOGGER.debug("Finding Table14 by id: {}", table14Id);
        try {
            return this.wmGenericDao.findById(table14Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table14 found with id: {}", table14Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table14> findByMultipleIds(List<Table14Id> table14Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table14s by ids: {}", table14Ids);

        return this.wmGenericDao.findByMultipleIds(table14Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table14 update(Table14 table14) {
        LOGGER.debug("Updating Table14 with information: {}", table14);

        this.wmGenericDao.update(table14);
        this.wmGenericDao.refresh(table14);

        return table14;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table14 delete(Table14Id table14Id) {
        LOGGER.debug("Deleting Table14 with id: {}", table14Id);
        Table14 deleted = this.wmGenericDao.findById(table14Id);
        if (deleted == null) {
            LOGGER.debug("No Table14 found with id: {}", table14Id);
            throw new EntityNotFoundException(String.valueOf(table14Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table14 table14) {
        LOGGER.debug("Deleting Table14 with {}", table14);
        this.wmGenericDao.delete(table14);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table14> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table14s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table14> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table14s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table14 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table14 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}