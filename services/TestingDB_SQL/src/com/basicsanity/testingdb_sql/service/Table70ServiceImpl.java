/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table70;
import com.basicsanity.testingdb_sql.Table71;


/**
 * ServiceImpl object for domain model class Table70.
 *
 * @see Table70
 */
@Service("TestingDB_SQL.Table70Service")
@Validated
public class Table70ServiceImpl implements Table70Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table70ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.Table71Service")
    private Table71Service table71Service;

    @Autowired
    @Qualifier("TestingDB_SQL.Table70Dao")
    private WMGenericDao<Table70, Date> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table70, Date> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table70 create(Table70 table70) {
        LOGGER.debug("Creating a new Table70 with information: {}", table70);

        Table70 table70Created = this.wmGenericDao.create(table70);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table70Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table70 getById(Date table70Id) {
        LOGGER.debug("Finding Table70 by id: {}", table70Id);
        return this.wmGenericDao.findById(table70Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table70 findById(Date table70Id) {
        LOGGER.debug("Finding Table70 by id: {}", table70Id);
        try {
            return this.wmGenericDao.findById(table70Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table70 found with id: {}", table70Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table70> findByMultipleIds(List<Date> table70Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table70s by ids: {}", table70Ids);

        return this.wmGenericDao.findByMultipleIds(table70Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table70 update(Table70 table70) {
        LOGGER.debug("Updating Table70 with information: {}", table70);

        this.wmGenericDao.update(table70);
        this.wmGenericDao.refresh(table70);

        return table70;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table70 delete(Date table70Id) {
        LOGGER.debug("Deleting Table70 with id: {}", table70Id);
        Table70 deleted = this.wmGenericDao.findById(table70Id);
        if (deleted == null) {
            LOGGER.debug("No Table70 found with id: {}", table70Id);
            throw new EntityNotFoundException(String.valueOf(table70Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table70 table70) {
        LOGGER.debug("Deleting Table70 with {}", table70);
        this.wmGenericDao.delete(table70);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table70> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table70s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table70> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table70s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table70 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table70 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table71> findAssociatedTable71s(Date id, Pageable pageable) {
        LOGGER.debug("Fetching all associated table71s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("table70.id = '" + id + "'");

        return table71Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Table71Service instance
     */
    protected void setTable71Service(Table71Service service) {
        this.table71Service = service;
    }

}