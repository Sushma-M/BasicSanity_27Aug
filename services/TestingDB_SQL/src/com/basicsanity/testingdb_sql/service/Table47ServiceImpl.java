/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table47;


/**
 * ServiceImpl object for domain model class Table47.
 *
 * @see Table47
 */
@Service("TestingDB_SQL.Table47Service")
@Validated
public class Table47ServiceImpl implements Table47Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table47ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.Table47Dao")
    private WMGenericDao<Table47, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table47, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table47 create(Table47 table47) {
        LOGGER.debug("Creating a new Table47 with information: {}", table47);

        Table47 table47Created = this.wmGenericDao.create(table47);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table47Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table47 getById(Integer table47Id) {
        LOGGER.debug("Finding Table47 by id: {}", table47Id);
        return this.wmGenericDao.findById(table47Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table47 findById(Integer table47Id) {
        LOGGER.debug("Finding Table47 by id: {}", table47Id);
        try {
            return this.wmGenericDao.findById(table47Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table47 found with id: {}", table47Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table47> findByMultipleIds(List<Integer> table47Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table47s by ids: {}", table47Ids);

        return this.wmGenericDao.findByMultipleIds(table47Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table47 update(Table47 table47) {
        LOGGER.debug("Updating Table47 with information: {}", table47);

        this.wmGenericDao.update(table47);
        this.wmGenericDao.refresh(table47);

        return table47;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table47 delete(Integer table47Id) {
        LOGGER.debug("Deleting Table47 with id: {}", table47Id);
        Table47 deleted = this.wmGenericDao.findById(table47Id);
        if (deleted == null) {
            LOGGER.debug("No Table47 found with id: {}", table47Id);
            throw new EntityNotFoundException(String.valueOf(table47Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table47 table47) {
        LOGGER.debug("Deleting Table47 with {}", table47);
        this.wmGenericDao.delete(table47);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table47> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table47s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table47> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table47s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table47 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table47 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}