/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table49;


/**
 * ServiceImpl object for domain model class Table49.
 *
 * @see Table49
 */
@Service("TestingDB_SQL.Table49Service")
@Validated
public class Table49ServiceImpl implements Table49Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table49ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.Table49Dao")
    private WMGenericDao<Table49, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table49, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table49 create(Table49 table49) {
        LOGGER.debug("Creating a new Table49 with information: {}", table49);

        Table49 table49Created = this.wmGenericDao.create(table49);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table49Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table49 getById(Integer table49Id) {
        LOGGER.debug("Finding Table49 by id: {}", table49Id);
        return this.wmGenericDao.findById(table49Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table49 findById(Integer table49Id) {
        LOGGER.debug("Finding Table49 by id: {}", table49Id);
        try {
            return this.wmGenericDao.findById(table49Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table49 found with id: {}", table49Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table49> findByMultipleIds(List<Integer> table49Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table49s by ids: {}", table49Ids);

        return this.wmGenericDao.findByMultipleIds(table49Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table49 update(Table49 table49) {
        LOGGER.debug("Updating Table49 with information: {}", table49);

        this.wmGenericDao.update(table49);
        this.wmGenericDao.refresh(table49);

        return table49;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table49 delete(Integer table49Id) {
        LOGGER.debug("Deleting Table49 with id: {}", table49Id);
        Table49 deleted = this.wmGenericDao.findById(table49Id);
        if (deleted == null) {
            LOGGER.debug("No Table49 found with id: {}", table49Id);
            throw new EntityNotFoundException(String.valueOf(table49Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table49 table49) {
        LOGGER.debug("Deleting Table49 with {}", table49);
        this.wmGenericDao.delete(table49);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table49> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table49s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table49> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table49s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table49 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table49 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}