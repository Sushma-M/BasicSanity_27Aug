/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OnlyVirtualTable;
import com.basicsanity.testingdb_sql.OnlyVirtualTableId;

/**
 * Service object for domain model class {@link OnlyVirtualTable}.
 */
public interface OnlyVirtualTableService {

    /**
     * Creates a new OnlyVirtualTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OnlyVirtualTable if any.
     *
     * @param onlyVirtualTable Details of the OnlyVirtualTable to be created; value cannot be null.
     * @return The newly created OnlyVirtualTable.
     */
    OnlyVirtualTable create(@Valid OnlyVirtualTable onlyVirtualTable);


	/**
     * Returns OnlyVirtualTable by given id if exists.
     *
     * @param onlyvirtualtableId The id of the OnlyVirtualTable to get; value cannot be null.
     * @return OnlyVirtualTable associated with the given onlyvirtualtableId.
	 * @throws EntityNotFoundException If no OnlyVirtualTable is found.
     */
    OnlyVirtualTable getById(OnlyVirtualTableId onlyvirtualtableId);

    /**
     * Find and return the OnlyVirtualTable by given id if exists, returns null otherwise.
     *
     * @param onlyvirtualtableId The id of the OnlyVirtualTable to get; value cannot be null.
     * @return OnlyVirtualTable associated with the given onlyvirtualtableId.
     */
    OnlyVirtualTable findById(OnlyVirtualTableId onlyvirtualtableId);

	/**
     * Find and return the list of OnlyVirtualTables by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param onlyvirtualtableIds The id's of the OnlyVirtualTable to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OnlyVirtualTables associated with the given onlyvirtualtableIds.
     */
    List<OnlyVirtualTable> findByMultipleIds(List<OnlyVirtualTableId> onlyvirtualtableIds, boolean orderedReturn);


    /**
     * Updates the details of an existing OnlyVirtualTable. It replaces all fields of the existing OnlyVirtualTable with the given onlyVirtualTable.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OnlyVirtualTable if any.
     *
     * @param onlyVirtualTable The details of the OnlyVirtualTable to be updated; value cannot be null.
     * @return The updated OnlyVirtualTable.
     * @throws EntityNotFoundException if no OnlyVirtualTable is found with given input.
     */
    OnlyVirtualTable update(@Valid OnlyVirtualTable onlyVirtualTable);

    /**
     * Deletes an existing OnlyVirtualTable with the given id.
     *
     * @param onlyvirtualtableId The id of the OnlyVirtualTable to be deleted; value cannot be null.
     * @return The deleted OnlyVirtualTable.
     * @throws EntityNotFoundException if no OnlyVirtualTable found with the given id.
     */
    OnlyVirtualTable delete(OnlyVirtualTableId onlyvirtualtableId);

    /**
     * Deletes an existing OnlyVirtualTable with the given object.
     *
     * @param onlyVirtualTable The instance of the OnlyVirtualTable to be deleted; value cannot be null.
     */
    void delete(OnlyVirtualTable onlyVirtualTable);

    /**
     * Find all OnlyVirtualTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OnlyVirtualTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OnlyVirtualTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OnlyVirtualTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OnlyVirtualTables.
     *
     * @see Pageable
     * @see Page
     */
    Page<OnlyVirtualTable> findAll(String query, Pageable pageable);

    /**
     * Exports all OnlyVirtualTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OnlyVirtualTables matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OnlyVirtualTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OnlyVirtualTable.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}