/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualTableTest;
import com.basicsanity.testingdb_sql.VirtualTableTestId;


/**
 * ServiceImpl object for domain model class VirtualTableTest.
 *
 * @see VirtualTableTest
 */
@Service("TestingDB_SQL.VirtualTableTestService")
@Validated
public class VirtualTableTestServiceImpl implements VirtualTableTestService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualTableTestServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.VirtualTableTestDao")
    private WMGenericDao<VirtualTableTest, VirtualTableTestId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualTableTest, VirtualTableTestId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualTableTest create(VirtualTableTest virtualTableTest) {
        LOGGER.debug("Creating a new VirtualTableTest with information: {}", virtualTableTest);

        VirtualTableTest virtualTableTestCreated = this.wmGenericDao.create(virtualTableTest);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualTableTestCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualTableTest getById(VirtualTableTestId virtualtabletestId) {
        LOGGER.debug("Finding VirtualTableTest by id: {}", virtualtabletestId);
        return this.wmGenericDao.findById(virtualtabletestId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualTableTest findById(VirtualTableTestId virtualtabletestId) {
        LOGGER.debug("Finding VirtualTableTest by id: {}", virtualtabletestId);
        try {
            return this.wmGenericDao.findById(virtualtabletestId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualTableTest found with id: {}", virtualtabletestId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<VirtualTableTest> findByMultipleIds(List<VirtualTableTestId> virtualtabletestIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualTableTests by ids: {}", virtualtabletestIds);

        return this.wmGenericDao.findByMultipleIds(virtualtabletestIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualTableTest getByUniqueKeyId(String id) {
        Map<String, Object> uniqueKeyIdMap = new HashMap<>();
        uniqueKeyIdMap.put("id", id);

        LOGGER.debug("Finding VirtualTableTest by unique keys: {}", uniqueKeyIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueKeyIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualTableTest update(VirtualTableTest virtualTableTest) {
        LOGGER.debug("Updating VirtualTableTest with information: {}", virtualTableTest);

        this.wmGenericDao.update(virtualTableTest);
        this.wmGenericDao.refresh(virtualTableTest);

        return virtualTableTest;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualTableTest delete(VirtualTableTestId virtualtabletestId) {
        LOGGER.debug("Deleting VirtualTableTest with id: {}", virtualtabletestId);
        VirtualTableTest deleted = this.wmGenericDao.findById(virtualtabletestId);
        if (deleted == null) {
            LOGGER.debug("No VirtualTableTest found with id: {}", virtualtabletestId);
            throw new EntityNotFoundException(String.valueOf(virtualtabletestId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(VirtualTableTest virtualTableTest) {
        LOGGER.debug("Deleting VirtualTableTest with {}", virtualTableTest);
        this.wmGenericDao.delete(virtualTableTest);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualTableTest> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualTableTests");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualTableTest> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualTableTests");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualTableTest to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualTableTest to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}