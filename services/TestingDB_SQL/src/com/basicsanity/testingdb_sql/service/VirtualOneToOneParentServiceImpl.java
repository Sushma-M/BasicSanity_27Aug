/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOneToOneParent;
import com.basicsanity.testingdb_sql.VirtualOneToOneParentId;


/**
 * ServiceImpl object for domain model class VirtualOneToOneParent.
 *
 * @see VirtualOneToOneParent
 */
@Service("TestingDB_SQL.VirtualOneToOneParentService")
@Validated
public class VirtualOneToOneParentServiceImpl implements VirtualOneToOneParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOneToOneParentServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.VirtualOneToOneParentDao")
    private WMGenericDao<VirtualOneToOneParent, VirtualOneToOneParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualOneToOneParent, VirtualOneToOneParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToOneParent create(VirtualOneToOneParent virtualOneToOneParent) {
        LOGGER.debug("Creating a new VirtualOneToOneParent with information: {}", virtualOneToOneParent);

        VirtualOneToOneParent virtualOneToOneParentCreated = this.wmGenericDao.create(virtualOneToOneParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualOneToOneParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToOneParent getById(VirtualOneToOneParentId virtualonetooneparentId) {
        LOGGER.debug("Finding VirtualOneToOneParent by id: {}", virtualonetooneparentId);
        return this.wmGenericDao.findById(virtualonetooneparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToOneParent findById(VirtualOneToOneParentId virtualonetooneparentId) {
        LOGGER.debug("Finding VirtualOneToOneParent by id: {}", virtualonetooneparentId);
        try {
            return this.wmGenericDao.findById(virtualonetooneparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualOneToOneParent found with id: {}", virtualonetooneparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<VirtualOneToOneParent> findByMultipleIds(List<VirtualOneToOneParentId> virtualonetooneparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualOneToOneParents by ids: {}", virtualonetooneparentIds);

        return this.wmGenericDao.findByMultipleIds(virtualonetooneparentIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToOneParent getByVirtualId(Integer virtualId) {
        Map<String, Object> virtualIdMap = new HashMap<>();
        virtualIdMap.put("virtualId", virtualId);

        LOGGER.debug("Finding VirtualOneToOneParent by unique keys: {}", virtualIdMap);
        return this.wmGenericDao.findByUniqueKey(virtualIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToOneParent update(VirtualOneToOneParent virtualOneToOneParent) {
        LOGGER.debug("Updating VirtualOneToOneParent with information: {}", virtualOneToOneParent);

        this.wmGenericDao.update(virtualOneToOneParent);
        this.wmGenericDao.refresh(virtualOneToOneParent);

        return virtualOneToOneParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToOneParent delete(VirtualOneToOneParentId virtualonetooneparentId) {
        LOGGER.debug("Deleting VirtualOneToOneParent with id: {}", virtualonetooneparentId);
        VirtualOneToOneParent deleted = this.wmGenericDao.findById(virtualonetooneparentId);
        if (deleted == null) {
            LOGGER.debug("No VirtualOneToOneParent found with id: {}", virtualonetooneparentId);
            throw new EntityNotFoundException(String.valueOf(virtualonetooneparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(VirtualOneToOneParent virtualOneToOneParent) {
        LOGGER.debug("Deleting VirtualOneToOneParent with {}", virtualOneToOneParent);
        this.wmGenericDao.delete(virtualOneToOneParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOneToOneParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOneToOneParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOneToOneParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOneToOneParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOneToOneParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOneToOneParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}