/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOneToManyParent;
import com.basicsanity.testingdb_sql.VirtualOneToManyParentId;

/**
 * Service object for domain model class {@link VirtualOneToManyParent}.
 */
public interface VirtualOneToManyParentService {

    /**
     * Creates a new VirtualOneToManyParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualOneToManyParent if any.
     *
     * @param virtualOneToManyParent Details of the VirtualOneToManyParent to be created; value cannot be null.
     * @return The newly created VirtualOneToManyParent.
     */
    VirtualOneToManyParent create(@Valid VirtualOneToManyParent virtualOneToManyParent);


	/**
     * Returns VirtualOneToManyParent by given id if exists.
     *
     * @param virtualonetomanyparentId The id of the VirtualOneToManyParent to get; value cannot be null.
     * @return VirtualOneToManyParent associated with the given virtualonetomanyparentId.
	 * @throws EntityNotFoundException If no VirtualOneToManyParent is found.
     */
    VirtualOneToManyParent getById(VirtualOneToManyParentId virtualonetomanyparentId);

    /**
     * Find and return the VirtualOneToManyParent by given id if exists, returns null otherwise.
     *
     * @param virtualonetomanyparentId The id of the VirtualOneToManyParent to get; value cannot be null.
     * @return VirtualOneToManyParent associated with the given virtualonetomanyparentId.
     */
    VirtualOneToManyParent findById(VirtualOneToManyParentId virtualonetomanyparentId);

	/**
     * Find and return the list of VirtualOneToManyParents by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param virtualonetomanyparentIds The id's of the VirtualOneToManyParent to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VirtualOneToManyParents associated with the given virtualonetomanyparentIds.
     */
    List<VirtualOneToManyParent> findByMultipleIds(List<VirtualOneToManyParentId> virtualonetomanyparentIds, boolean orderedReturn);

    /**
     * Find and return the VirtualOneToManyParent for given virtualId  if exists.
     *
     * @param virtualId value of virtualId; value cannot be null.
     * @return VirtualOneToManyParent associated with the given inputs.
     * @throws EntityNotFoundException if no matching VirtualOneToManyParent found.
     */
    VirtualOneToManyParent getByVirtualId(Date virtualId);

    /**
     * Updates the details of an existing VirtualOneToManyParent. It replaces all fields of the existing VirtualOneToManyParent with the given virtualOneToManyParent.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualOneToManyParent if any.
     *
     * @param virtualOneToManyParent The details of the VirtualOneToManyParent to be updated; value cannot be null.
     * @return The updated VirtualOneToManyParent.
     * @throws EntityNotFoundException if no VirtualOneToManyParent is found with given input.
     */
    VirtualOneToManyParent update(@Valid VirtualOneToManyParent virtualOneToManyParent);

    /**
     * Deletes an existing VirtualOneToManyParent with the given id.
     *
     * @param virtualonetomanyparentId The id of the VirtualOneToManyParent to be deleted; value cannot be null.
     * @return The deleted VirtualOneToManyParent.
     * @throws EntityNotFoundException if no VirtualOneToManyParent found with the given id.
     */
    VirtualOneToManyParent delete(VirtualOneToManyParentId virtualonetomanyparentId);

    /**
     * Deletes an existing VirtualOneToManyParent with the given object.
     *
     * @param virtualOneToManyParent The instance of the VirtualOneToManyParent to be deleted; value cannot be null.
     */
    void delete(VirtualOneToManyParent virtualOneToManyParent);

    /**
     * Find all VirtualOneToManyParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualOneToManyParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VirtualOneToManyParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VirtualOneToManyParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualOneToManyParents.
     *
     * @see Pageable
     * @see Page
     */
    Page<VirtualOneToManyParent> findAll(String query, Pageable pageable);

    /**
     * Exports all VirtualOneToManyParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VirtualOneToManyParents matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VirtualOneToManyParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VirtualOneToManyParent.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}