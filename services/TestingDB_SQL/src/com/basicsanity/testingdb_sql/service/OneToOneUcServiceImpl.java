/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneUc;


/**
 * ServiceImpl object for domain model class OneToOneUc.
 *
 * @see OneToOneUc
 */
@Service("TestingDB_SQL.OneToOneUcService")
@Validated
public class OneToOneUcServiceImpl implements OneToOneUcService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToOneUcServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.OneToOneUcDao")
    private WMGenericDao<OneToOneUc, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OneToOneUc, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUc create(OneToOneUc oneToOneUc) {
        LOGGER.debug("Creating a new OneToOneUc with information: {}", oneToOneUc);

        OneToOneUc oneToOneUcCreated = this.wmGenericDao.create(oneToOneUc);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(oneToOneUcCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUc getById(Integer onetooneucId) {
        LOGGER.debug("Finding OneToOneUc by id: {}", onetooneucId);
        return this.wmGenericDao.findById(onetooneucId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUc findById(Integer onetooneucId) {
        LOGGER.debug("Finding OneToOneUc by id: {}", onetooneucId);
        try {
            return this.wmGenericDao.findById(onetooneucId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OneToOneUc found with id: {}", onetooneucId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OneToOneUc> findByMultipleIds(List<Integer> onetooneucIds, boolean orderedReturn) {
        LOGGER.debug("Finding OneToOneUcs by ids: {}", onetooneucIds);

        return this.wmGenericDao.findByMultipleIds(onetooneucIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUc getByUniqueParentId(Integer uniqueParentId) {
        Map<String, Object> uniqueParentIdMap = new HashMap<>();
        uniqueParentIdMap.put("uniqueParentId", uniqueParentId);

        LOGGER.debug("Finding OneToOneUc by unique keys: {}", uniqueParentIdMap);
        return this.wmGenericDao.findByUniqueKey(uniqueParentIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUc update(OneToOneUc oneToOneUc) {
        LOGGER.debug("Updating OneToOneUc with information: {}", oneToOneUc);

        this.wmGenericDao.update(oneToOneUc);
        this.wmGenericDao.refresh(oneToOneUc);

        return oneToOneUc;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUc delete(Integer onetooneucId) {
        LOGGER.debug("Deleting OneToOneUc with id: {}", onetooneucId);
        OneToOneUc deleted = this.wmGenericDao.findById(onetooneucId);
        if (deleted == null) {
            LOGGER.debug("No OneToOneUc found with id: {}", onetooneucId);
            throw new EntityNotFoundException(String.valueOf(onetooneucId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OneToOneUc oneToOneUc) {
        LOGGER.debug("Deleting OneToOneUc with {}", oneToOneUc);
        this.wmGenericDao.delete(oneToOneUc);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneUc> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneUcs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneUc> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneUcs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneUc to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneUc to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}