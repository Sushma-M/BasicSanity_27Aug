/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToManyChild;
import com.basicsanity.testingdb_sql.OneToManyParent;


/**
 * ServiceImpl object for domain model class OneToManyParent.
 *
 * @see OneToManyParent
 */
@Service("TestingDB_SQL.OneToManyParentService")
@Validated
public class OneToManyParentServiceImpl implements OneToManyParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToManyParentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.OneToManyChildService")
    private OneToManyChildService oneToManyChildService;

    @Autowired
    @Qualifier("TestingDB_SQL.OneToManyParentDao")
    private WMGenericDao<OneToManyParent, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OneToManyParent, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyParent create(OneToManyParent oneToManyParent) {
        LOGGER.debug("Creating a new OneToManyParent with information: {}", oneToManyParent);

        OneToManyParent oneToManyParentCreated = this.wmGenericDao.create(oneToManyParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(oneToManyParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyParent getById(Integer onetomanyparentId) {
        LOGGER.debug("Finding OneToManyParent by id: {}", onetomanyparentId);
        return this.wmGenericDao.findById(onetomanyparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyParent findById(Integer onetomanyparentId) {
        LOGGER.debug("Finding OneToManyParent by id: {}", onetomanyparentId);
        try {
            return this.wmGenericDao.findById(onetomanyparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OneToManyParent found with id: {}", onetomanyparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OneToManyParent> findByMultipleIds(List<Integer> onetomanyparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding OneToManyParents by ids: {}", onetomanyparentIds);

        return this.wmGenericDao.findByMultipleIds(onetomanyparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyParent update(OneToManyParent oneToManyParent) {
        LOGGER.debug("Updating OneToManyParent with information: {}", oneToManyParent);

        this.wmGenericDao.update(oneToManyParent);
        this.wmGenericDao.refresh(oneToManyParent);

        return oneToManyParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyParent delete(Integer onetomanyparentId) {
        LOGGER.debug("Deleting OneToManyParent with id: {}", onetomanyparentId);
        OneToManyParent deleted = this.wmGenericDao.findById(onetomanyparentId);
        if (deleted == null) {
            LOGGER.debug("No OneToManyParent found with id: {}", onetomanyparentId);
            throw new EntityNotFoundException(String.valueOf(onetomanyparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OneToManyParent oneToManyParent) {
        LOGGER.debug("Deleting OneToManyParent with {}", oneToManyParent);
        this.wmGenericDao.delete(oneToManyParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToManyParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OneToManyParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToManyParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OneToManyParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToManyParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToManyParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToManyChild> findAssociatedOneToManyChilds(Integer pkColumn, Pageable pageable) {
        LOGGER.debug("Fetching all associated oneToManyChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("oneToManyParent.pkColumn = '" + pkColumn + "'");

        return oneToManyChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service OneToManyChildService instance
     */
    protected void setOneToManyChildService(OneToManyChildService service) {
        this.oneToManyChildService = service;
    }

}