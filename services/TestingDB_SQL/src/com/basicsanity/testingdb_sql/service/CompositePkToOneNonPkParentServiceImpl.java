/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositePkToNonPkChild;
import com.basicsanity.testingdb_sql.CompositePkToOneNonPkParent;
import com.basicsanity.testingdb_sql.CompositePkToOneNonPkParentId;


/**
 * ServiceImpl object for domain model class CompositePkToOneNonPkParent.
 *
 * @see CompositePkToOneNonPkParent
 */
@Service("TestingDB_SQL.CompositePkToOneNonPkParentService")
@Validated
public class CompositePkToOneNonPkParentServiceImpl implements CompositePkToOneNonPkParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositePkToOneNonPkParentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.CompositePkToNonPkChildService")
    private CompositePkToNonPkChildService compositePkToNonPkChildService;

    @Autowired
    @Qualifier("TestingDB_SQL.CompositePkToOneNonPkParentDao")
    private WMGenericDao<CompositePkToOneNonPkParent, CompositePkToOneNonPkParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositePkToOneNonPkParent, CompositePkToOneNonPkParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositePkToOneNonPkParent create(CompositePkToOneNonPkParent compositePkToOneNonPkParent) {
        LOGGER.debug("Creating a new CompositePkToOneNonPkParent with information: {}", compositePkToOneNonPkParent);

        CompositePkToOneNonPkParent compositePkToOneNonPkParentCreated = this.wmGenericDao.create(compositePkToOneNonPkParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositePkToOneNonPkParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositePkToOneNonPkParent getById(CompositePkToOneNonPkParentId compositepktoonenonpkparentId) {
        LOGGER.debug("Finding CompositePkToOneNonPkParent by id: {}", compositepktoonenonpkparentId);
        return this.wmGenericDao.findById(compositepktoonenonpkparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositePkToOneNonPkParent findById(CompositePkToOneNonPkParentId compositepktoonenonpkparentId) {
        LOGGER.debug("Finding CompositePkToOneNonPkParent by id: {}", compositepktoonenonpkparentId);
        try {
            return this.wmGenericDao.findById(compositepktoonenonpkparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositePkToOneNonPkParent found with id: {}", compositepktoonenonpkparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositePkToOneNonPkParent> findByMultipleIds(List<CompositePkToOneNonPkParentId> compositepktoonenonpkparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositePkToOneNonPkParents by ids: {}", compositepktoonenonpkparentIds);

        return this.wmGenericDao.findByMultipleIds(compositepktoonenonpkparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositePkToOneNonPkParent update(CompositePkToOneNonPkParent compositePkToOneNonPkParent) {
        LOGGER.debug("Updating CompositePkToOneNonPkParent with information: {}", compositePkToOneNonPkParent);

        this.wmGenericDao.update(compositePkToOneNonPkParent);
        this.wmGenericDao.refresh(compositePkToOneNonPkParent);

        return compositePkToOneNonPkParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositePkToOneNonPkParent delete(CompositePkToOneNonPkParentId compositepktoonenonpkparentId) {
        LOGGER.debug("Deleting CompositePkToOneNonPkParent with id: {}", compositepktoonenonpkparentId);
        CompositePkToOneNonPkParent deleted = this.wmGenericDao.findById(compositepktoonenonpkparentId);
        if (deleted == null) {
            LOGGER.debug("No CompositePkToOneNonPkParent found with id: {}", compositepktoonenonpkparentId);
            throw new EntityNotFoundException(String.valueOf(compositepktoonenonpkparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositePkToOneNonPkParent compositePkToOneNonPkParent) {
        LOGGER.debug("Deleting CompositePkToOneNonPkParent with {}", compositePkToOneNonPkParent);
        this.wmGenericDao.delete(compositePkToOneNonPkParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositePkToOneNonPkParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositePkToOneNonPkParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositePkToOneNonPkParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositePkToOneNonPkParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositePkToOneNonPkParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositePkToOneNonPkParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositePkToNonPkChild> findAssociatedCompositePkToNonPkChilds(Date createdDate, Integer compositeId, Pageable pageable) {
        LOGGER.debug("Fetching all associated compositePkToNonPkChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("compositePkToOneNonPkParent.createdDate = '" + createdDate + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("compositePkToOneNonPkParent.compositeId = '" + compositeId + "'");

        return compositePkToNonPkChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CompositePkToNonPkChildService instance
     */
    protected void setCompositePkToNonPkChildService(CompositePkToNonPkChildService service) {
        this.compositePkToNonPkChildService = service;
    }

}