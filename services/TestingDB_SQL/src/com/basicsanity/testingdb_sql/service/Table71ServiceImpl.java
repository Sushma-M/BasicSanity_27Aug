/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table71;


/**
 * ServiceImpl object for domain model class Table71.
 *
 * @see Table71
 */
@Service("TestingDB_SQL.Table71Service")
@Validated
public class Table71ServiceImpl implements Table71Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table71ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.Table71Dao")
    private WMGenericDao<Table71, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table71, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table71 create(Table71 table71) {
        LOGGER.debug("Creating a new Table71 with information: {}", table71);

        Table71 table71Created = this.wmGenericDao.create(table71);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table71Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table71 getById(Integer table71Id) {
        LOGGER.debug("Finding Table71 by id: {}", table71Id);
        return this.wmGenericDao.findById(table71Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table71 findById(Integer table71Id) {
        LOGGER.debug("Finding Table71 by id: {}", table71Id);
        try {
            return this.wmGenericDao.findById(table71Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table71 found with id: {}", table71Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table71> findByMultipleIds(List<Integer> table71Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table71s by ids: {}", table71Ids);

        return this.wmGenericDao.findByMultipleIds(table71Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table71 update(Table71 table71) {
        LOGGER.debug("Updating Table71 with information: {}", table71);

        this.wmGenericDao.update(table71);
        this.wmGenericDao.refresh(table71);

        return table71;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table71 delete(Integer table71Id) {
        LOGGER.debug("Deleting Table71 with id: {}", table71Id);
        Table71 deleted = this.wmGenericDao.findById(table71Id);
        if (deleted == null) {
            LOGGER.debug("No Table71 found with id: {}", table71Id);
            throw new EntityNotFoundException(String.valueOf(table71Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table71 table71) {
        LOGGER.debug("Deleting Table71 with {}", table71);
        this.wmGenericDao.delete(table71);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table71> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table71s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table71> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table71s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table71 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table71 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}