/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeO2mChild;


/**
 * ServiceImpl object for domain model class CompositeO2mChild.
 *
 * @see CompositeO2mChild
 */
@Service("TestingDB_SQL.CompositeO2mChildService")
@Validated
public class CompositeO2mChildServiceImpl implements CompositeO2mChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeO2mChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.CompositeO2mChildDao")
    private WMGenericDao<CompositeO2mChild, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeO2mChild, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeO2mChild create(CompositeO2mChild compositeO2mChild) {
        LOGGER.debug("Creating a new CompositeO2mChild with information: {}", compositeO2mChild);

        CompositeO2mChild compositeO2mChildCreated = this.wmGenericDao.create(compositeO2mChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeO2mChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeO2mChild getById(Integer compositeo2mchildId) {
        LOGGER.debug("Finding CompositeO2mChild by id: {}", compositeo2mchildId);
        return this.wmGenericDao.findById(compositeo2mchildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeO2mChild findById(Integer compositeo2mchildId) {
        LOGGER.debug("Finding CompositeO2mChild by id: {}", compositeo2mchildId);
        try {
            return this.wmGenericDao.findById(compositeo2mchildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeO2mChild found with id: {}", compositeo2mchildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositeO2mChild> findByMultipleIds(List<Integer> compositeo2mchildIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeO2mChilds by ids: {}", compositeo2mchildIds);

        return this.wmGenericDao.findByMultipleIds(compositeo2mchildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeO2mChild update(CompositeO2mChild compositeO2mChild) {
        LOGGER.debug("Updating CompositeO2mChild with information: {}", compositeO2mChild);

        this.wmGenericDao.update(compositeO2mChild);
        this.wmGenericDao.refresh(compositeO2mChild);

        return compositeO2mChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeO2mChild delete(Integer compositeo2mchildId) {
        LOGGER.debug("Deleting CompositeO2mChild with id: {}", compositeo2mchildId);
        CompositeO2mChild deleted = this.wmGenericDao.findById(compositeo2mchildId);
        if (deleted == null) {
            LOGGER.debug("No CompositeO2mChild found with id: {}", compositeo2mchildId);
            throw new EntityNotFoundException(String.valueOf(compositeo2mchildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositeO2mChild compositeO2mChild) {
        LOGGER.debug("Deleting CompositeO2mChild with {}", compositeO2mChild);
        this.wmGenericDao.delete(compositeO2mChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeO2mChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeO2mChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeO2mChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeO2mChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeO2mChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeO2mChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}