/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneParent;

/**
 * Service object for domain model class {@link OneToOneParent}.
 */
public interface OneToOneParentService {

    /**
     * Creates a new OneToOneParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneParent if any.
     *
     * @param oneToOneParent Details of the OneToOneParent to be created; value cannot be null.
     * @return The newly created OneToOneParent.
     */
    OneToOneParent create(@Valid OneToOneParent oneToOneParent);


	/**
     * Returns OneToOneParent by given id if exists.
     *
     * @param onetooneparentId The id of the OneToOneParent to get; value cannot be null.
     * @return OneToOneParent associated with the given onetooneparentId.
	 * @throws EntityNotFoundException If no OneToOneParent is found.
     */
    OneToOneParent getById(String onetooneparentId);

    /**
     * Find and return the OneToOneParent by given id if exists, returns null otherwise.
     *
     * @param onetooneparentId The id of the OneToOneParent to get; value cannot be null.
     * @return OneToOneParent associated with the given onetooneparentId.
     */
    OneToOneParent findById(String onetooneparentId);

	/**
     * Find and return the list of OneToOneParents by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param onetooneparentIds The id's of the OneToOneParent to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OneToOneParents associated with the given onetooneparentIds.
     */
    List<OneToOneParent> findByMultipleIds(List<String> onetooneparentIds, boolean orderedReturn);

    /**
     * Find and return the OneToOneParent for given id  andcolumn2  if exists.
     *
     * @param id value of id; value cannot be null.
     * @param column2 value of column2; value cannot be null.
     * @return OneToOneParent associated with the given inputs.
     * @throws EntityNotFoundException if no matching OneToOneParent found.
     */
    OneToOneParent getByIdAndColumn2(String id, String column2);

    /**
     * Updates the details of an existing OneToOneParent. It replaces all fields of the existing OneToOneParent with the given oneToOneParent.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneParent if any.
     *
     * @param oneToOneParent The details of the OneToOneParent to be updated; value cannot be null.
     * @return The updated OneToOneParent.
     * @throws EntityNotFoundException if no OneToOneParent is found with given input.
     */
    OneToOneParent update(@Valid OneToOneParent oneToOneParent);

    /**
     * Deletes an existing OneToOneParent with the given id.
     *
     * @param onetooneparentId The id of the OneToOneParent to be deleted; value cannot be null.
     * @return The deleted OneToOneParent.
     * @throws EntityNotFoundException if no OneToOneParent found with the given id.
     */
    OneToOneParent delete(String onetooneparentId);

    /**
     * Deletes an existing OneToOneParent with the given object.
     *
     * @param oneToOneParent The instance of the OneToOneParent to be deleted; value cannot be null.
     */
    void delete(OneToOneParent oneToOneParent);

    /**
     * Find all OneToOneParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OneToOneParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OneToOneParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneParents.
     *
     * @see Pageable
     * @see Page
     */
    Page<OneToOneParent> findAll(String query, Pageable pageable);

    /**
     * Exports all OneToOneParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OneToOneParents matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OneToOneParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OneToOneParent.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}