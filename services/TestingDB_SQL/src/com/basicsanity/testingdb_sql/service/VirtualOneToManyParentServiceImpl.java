/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOneToManyParent;
import com.basicsanity.testingdb_sql.VirtualOneToManyParentId;


/**
 * ServiceImpl object for domain model class VirtualOneToManyParent.
 *
 * @see VirtualOneToManyParent
 */
@Service("TestingDB_SQL.VirtualOneToManyParentService")
@Validated
public class VirtualOneToManyParentServiceImpl implements VirtualOneToManyParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOneToManyParentServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.VirtualOneToManyParentDao")
    private WMGenericDao<VirtualOneToManyParent, VirtualOneToManyParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualOneToManyParent, VirtualOneToManyParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyParent create(VirtualOneToManyParent virtualOneToManyParent) {
        LOGGER.debug("Creating a new VirtualOneToManyParent with information: {}", virtualOneToManyParent);

        VirtualOneToManyParent virtualOneToManyParentCreated = this.wmGenericDao.create(virtualOneToManyParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualOneToManyParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyParent getById(VirtualOneToManyParentId virtualonetomanyparentId) {
        LOGGER.debug("Finding VirtualOneToManyParent by id: {}", virtualonetomanyparentId);
        return this.wmGenericDao.findById(virtualonetomanyparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyParent findById(VirtualOneToManyParentId virtualonetomanyparentId) {
        LOGGER.debug("Finding VirtualOneToManyParent by id: {}", virtualonetomanyparentId);
        try {
            return this.wmGenericDao.findById(virtualonetomanyparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualOneToManyParent found with id: {}", virtualonetomanyparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<VirtualOneToManyParent> findByMultipleIds(List<VirtualOneToManyParentId> virtualonetomanyparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualOneToManyParents by ids: {}", virtualonetomanyparentIds);

        return this.wmGenericDao.findByMultipleIds(virtualonetomanyparentIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyParent getByVirtualId(Date virtualId) {
        Map<String, Object> virtualIdMap = new HashMap<>();
        virtualIdMap.put("virtualId", virtualId);

        LOGGER.debug("Finding VirtualOneToManyParent by unique keys: {}", virtualIdMap);
        return this.wmGenericDao.findByUniqueKey(virtualIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyParent update(VirtualOneToManyParent virtualOneToManyParent) {
        LOGGER.debug("Updating VirtualOneToManyParent with information: {}", virtualOneToManyParent);

        this.wmGenericDao.update(virtualOneToManyParent);
        this.wmGenericDao.refresh(virtualOneToManyParent);

        return virtualOneToManyParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyParent delete(VirtualOneToManyParentId virtualonetomanyparentId) {
        LOGGER.debug("Deleting VirtualOneToManyParent with id: {}", virtualonetomanyparentId);
        VirtualOneToManyParent deleted = this.wmGenericDao.findById(virtualonetomanyparentId);
        if (deleted == null) {
            LOGGER.debug("No VirtualOneToManyParent found with id: {}", virtualonetomanyparentId);
            throw new EntityNotFoundException(String.valueOf(virtualonetomanyparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(VirtualOneToManyParent virtualOneToManyParent) {
        LOGGER.debug("Deleting VirtualOneToManyParent with {}", virtualOneToManyParent);
        this.wmGenericDao.delete(virtualOneToManyParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOneToManyParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOneToManyParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOneToManyParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOneToManyParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOneToManyParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOneToManyParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}