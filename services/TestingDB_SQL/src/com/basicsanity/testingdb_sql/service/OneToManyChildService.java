/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToManyChild;

/**
 * Service object for domain model class {@link OneToManyChild}.
 */
public interface OneToManyChildService {

    /**
     * Creates a new OneToManyChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToManyChild if any.
     *
     * @param oneToManyChild Details of the OneToManyChild to be created; value cannot be null.
     * @return The newly created OneToManyChild.
     */
    OneToManyChild create(@Valid OneToManyChild oneToManyChild);


	/**
     * Returns OneToManyChild by given id if exists.
     *
     * @param onetomanychildId The id of the OneToManyChild to get; value cannot be null.
     * @return OneToManyChild associated with the given onetomanychildId.
	 * @throws EntityNotFoundException If no OneToManyChild is found.
     */
    OneToManyChild getById(Integer onetomanychildId);

    /**
     * Find and return the OneToManyChild by given id if exists, returns null otherwise.
     *
     * @param onetomanychildId The id of the OneToManyChild to get; value cannot be null.
     * @return OneToManyChild associated with the given onetomanychildId.
     */
    OneToManyChild findById(Integer onetomanychildId);

	/**
     * Find and return the list of OneToManyChilds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param onetomanychildIds The id's of the OneToManyChild to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OneToManyChilds associated with the given onetomanychildIds.
     */
    List<OneToManyChild> findByMultipleIds(List<Integer> onetomanychildIds, boolean orderedReturn);


    /**
     * Updates the details of an existing OneToManyChild. It replaces all fields of the existing OneToManyChild with the given oneToManyChild.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToManyChild if any.
     *
     * @param oneToManyChild The details of the OneToManyChild to be updated; value cannot be null.
     * @return The updated OneToManyChild.
     * @throws EntityNotFoundException if no OneToManyChild is found with given input.
     */
    OneToManyChild update(@Valid OneToManyChild oneToManyChild);

    /**
     * Deletes an existing OneToManyChild with the given id.
     *
     * @param onetomanychildId The id of the OneToManyChild to be deleted; value cannot be null.
     * @return The deleted OneToManyChild.
     * @throws EntityNotFoundException if no OneToManyChild found with the given id.
     */
    OneToManyChild delete(Integer onetomanychildId);

    /**
     * Deletes an existing OneToManyChild with the given object.
     *
     * @param oneToManyChild The instance of the OneToManyChild to be deleted; value cannot be null.
     */
    void delete(OneToManyChild oneToManyChild);

    /**
     * Find all OneToManyChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToManyChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OneToManyChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OneToManyChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToManyChilds.
     *
     * @see Pageable
     * @see Page
     */
    Page<OneToManyChild> findAll(String query, Pageable pageable);

    /**
     * Exports all OneToManyChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OneToManyChilds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OneToManyChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OneToManyChild.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}