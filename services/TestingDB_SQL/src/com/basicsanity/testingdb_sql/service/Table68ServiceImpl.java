/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table68;
import com.basicsanity.testingdb_sql.Table68Id;


/**
 * ServiceImpl object for domain model class Table68.
 *
 * @see Table68
 */
@Service("TestingDB_SQL.Table68Service")
@Validated
public class Table68ServiceImpl implements Table68Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table68ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.Table68Dao")
    private WMGenericDao<Table68, Table68Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table68, Table68Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table68 create(Table68 table68) {
        LOGGER.debug("Creating a new Table68 with information: {}", table68);

        Table68 table68Created = this.wmGenericDao.create(table68);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table68Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table68 getById(Table68Id table68Id) {
        LOGGER.debug("Finding Table68 by id: {}", table68Id);
        return this.wmGenericDao.findById(table68Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table68 findById(Table68Id table68Id) {
        LOGGER.debug("Finding Table68 by id: {}", table68Id);
        try {
            return this.wmGenericDao.findById(table68Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table68 found with id: {}", table68Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table68> findByMultipleIds(List<Table68Id> table68Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table68s by ids: {}", table68Ids);

        return this.wmGenericDao.findByMultipleIds(table68Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table68 update(Table68 table68) {
        LOGGER.debug("Updating Table68 with information: {}", table68);

        this.wmGenericDao.update(table68);
        this.wmGenericDao.refresh(table68);

        return table68;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table68 delete(Table68Id table68Id) {
        LOGGER.debug("Deleting Table68 with id: {}", table68Id);
        Table68 deleted = this.wmGenericDao.findById(table68Id);
        if (deleted == null) {
            LOGGER.debug("No Table68 found with id: {}", table68Id);
            throw new EntityNotFoundException(String.valueOf(table68Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table68 table68) {
        LOGGER.debug("Deleting Table68 with {}", table68);
        this.wmGenericDao.delete(table68);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table68> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table68s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table68> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table68s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table68 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table68 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}