/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeOtoChild;
import com.basicsanity.testingdb_sql.CompositeOtoParentId;


/**
 * ServiceImpl object for domain model class CompositeOtoChild.
 *
 * @see CompositeOtoChild
 */
@Service("TestingDB_SQL.CompositeOtoChildService")
@Validated
public class CompositeOtoChildServiceImpl implements CompositeOtoChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOtoChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.CompositeOtoChildDao")
    private WMGenericDao<CompositeOtoChild, CompositeOtoParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeOtoChild, CompositeOtoParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoChild create(CompositeOtoChild compositeOtoChild) {
        LOGGER.debug("Creating a new CompositeOtoChild with information: {}", compositeOtoChild);

        CompositeOtoChild compositeOtoChildCreated = this.wmGenericDao.create(compositeOtoChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeOtoChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoChild getById(CompositeOtoParentId compositeotochildId) {
        LOGGER.debug("Finding CompositeOtoChild by id: {}", compositeotochildId);
        return this.wmGenericDao.findById(compositeotochildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoChild findById(CompositeOtoParentId compositeotochildId) {
        LOGGER.debug("Finding CompositeOtoChild by id: {}", compositeotochildId);
        try {
            return this.wmGenericDao.findById(compositeotochildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeOtoChild found with id: {}", compositeotochildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositeOtoChild> findByMultipleIds(List<CompositeOtoParentId> compositeotochildIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeOtoChilds by ids: {}", compositeotochildIds);

        return this.wmGenericDao.findByMultipleIds(compositeotochildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoChild update(CompositeOtoChild compositeOtoChild) {
        LOGGER.debug("Updating CompositeOtoChild with information: {}", compositeOtoChild);

        this.wmGenericDao.update(compositeOtoChild);
        this.wmGenericDao.refresh(compositeOtoChild);

        return compositeOtoChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoChild delete(CompositeOtoParentId compositeotochildId) {
        LOGGER.debug("Deleting CompositeOtoChild with id: {}", compositeotochildId);
        CompositeOtoChild deleted = this.wmGenericDao.findById(compositeotochildId);
        if (deleted == null) {
            LOGGER.debug("No CompositeOtoChild found with id: {}", compositeotochildId);
            throw new EntityNotFoundException(String.valueOf(compositeotochildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositeOtoChild compositeOtoChild) {
        LOGGER.debug("Deleting CompositeOtoChild with {}", compositeOtoChild);
        this.wmGenericDao.delete(compositeOtoChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOtoChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOtoChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOtoChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOtoChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOtoChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOtoChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}