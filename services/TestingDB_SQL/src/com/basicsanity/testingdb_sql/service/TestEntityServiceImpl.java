/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.TestEntity;


/**
 * ServiceImpl object for domain model class TestEntity.
 *
 * @see TestEntity
 */
@Service("TestingDB_SQL.TestEntityService")
@Validated
public class TestEntityServiceImpl implements TestEntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestEntityServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.TestEntityDao")
    private WMGenericDao<TestEntity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestEntity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public TestEntity create(TestEntity testEntity) {
        LOGGER.debug("Creating a new TestEntity with information: {}", testEntity);

        TestEntity testEntityCreated = this.wmGenericDao.create(testEntity);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(testEntityCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public TestEntity getById(Integer testentityId) {
        LOGGER.debug("Finding TestEntity by id: {}", testentityId);
        return this.wmGenericDao.findById(testentityId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public TestEntity findById(Integer testentityId) {
        LOGGER.debug("Finding TestEntity by id: {}", testentityId);
        try {
            return this.wmGenericDao.findById(testentityId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TestEntity found with id: {}", testentityId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<TestEntity> findByMultipleIds(List<Integer> testentityIds, boolean orderedReturn) {
        LOGGER.debug("Finding TestEntities by ids: {}", testentityIds);

        return this.wmGenericDao.findByMultipleIds(testentityIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public TestEntity update(TestEntity testEntity) {
        LOGGER.debug("Updating TestEntity with information: {}", testEntity);

        this.wmGenericDao.update(testEntity);
        this.wmGenericDao.refresh(testEntity);

        return testEntity;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public TestEntity delete(Integer testentityId) {
        LOGGER.debug("Deleting TestEntity with id: {}", testentityId);
        TestEntity deleted = this.wmGenericDao.findById(testentityId);
        if (deleted == null) {
            LOGGER.debug("No TestEntity found with id: {}", testentityId);
            throw new EntityNotFoundException(String.valueOf(testentityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(TestEntity testEntity) {
        LOGGER.debug("Deleting TestEntity with {}", testEntity);
        this.wmGenericDao.delete(testEntity);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<TestEntity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestEntities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<TestEntity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestEntities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table TestEntity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table TestEntity to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}