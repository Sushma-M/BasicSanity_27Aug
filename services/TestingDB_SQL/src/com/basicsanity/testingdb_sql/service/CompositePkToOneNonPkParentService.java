/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.sql.Date;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositePkToNonPkChild;
import com.basicsanity.testingdb_sql.CompositePkToOneNonPkParent;
import com.basicsanity.testingdb_sql.CompositePkToOneNonPkParentId;

/**
 * Service object for domain model class {@link CompositePkToOneNonPkParent}.
 */
public interface CompositePkToOneNonPkParentService {

    /**
     * Creates a new CompositePkToOneNonPkParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompositePkToOneNonPkParent if any.
     *
     * @param compositePkToOneNonPkParent Details of the CompositePkToOneNonPkParent to be created; value cannot be null.
     * @return The newly created CompositePkToOneNonPkParent.
     */
    CompositePkToOneNonPkParent create(@Valid CompositePkToOneNonPkParent compositePkToOneNonPkParent);


	/**
     * Returns CompositePkToOneNonPkParent by given id if exists.
     *
     * @param compositepktoonenonpkparentId The id of the CompositePkToOneNonPkParent to get; value cannot be null.
     * @return CompositePkToOneNonPkParent associated with the given compositepktoonenonpkparentId.
	 * @throws EntityNotFoundException If no CompositePkToOneNonPkParent is found.
     */
    CompositePkToOneNonPkParent getById(CompositePkToOneNonPkParentId compositepktoonenonpkparentId);

    /**
     * Find and return the CompositePkToOneNonPkParent by given id if exists, returns null otherwise.
     *
     * @param compositepktoonenonpkparentId The id of the CompositePkToOneNonPkParent to get; value cannot be null.
     * @return CompositePkToOneNonPkParent associated with the given compositepktoonenonpkparentId.
     */
    CompositePkToOneNonPkParent findById(CompositePkToOneNonPkParentId compositepktoonenonpkparentId);

	/**
     * Find and return the list of CompositePkToOneNonPkParents by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param compositepktoonenonpkparentIds The id's of the CompositePkToOneNonPkParent to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CompositePkToOneNonPkParents associated with the given compositepktoonenonpkparentIds.
     */
    List<CompositePkToOneNonPkParent> findByMultipleIds(List<CompositePkToOneNonPkParentId> compositepktoonenonpkparentIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CompositePkToOneNonPkParent. It replaces all fields of the existing CompositePkToOneNonPkParent with the given compositePkToOneNonPkParent.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompositePkToOneNonPkParent if any.
     *
     * @param compositePkToOneNonPkParent The details of the CompositePkToOneNonPkParent to be updated; value cannot be null.
     * @return The updated CompositePkToOneNonPkParent.
     * @throws EntityNotFoundException if no CompositePkToOneNonPkParent is found with given input.
     */
    CompositePkToOneNonPkParent update(@Valid CompositePkToOneNonPkParent compositePkToOneNonPkParent);

    /**
     * Deletes an existing CompositePkToOneNonPkParent with the given id.
     *
     * @param compositepktoonenonpkparentId The id of the CompositePkToOneNonPkParent to be deleted; value cannot be null.
     * @return The deleted CompositePkToOneNonPkParent.
     * @throws EntityNotFoundException if no CompositePkToOneNonPkParent found with the given id.
     */
    CompositePkToOneNonPkParent delete(CompositePkToOneNonPkParentId compositepktoonenonpkparentId);

    /**
     * Deletes an existing CompositePkToOneNonPkParent with the given object.
     *
     * @param compositePkToOneNonPkParent The instance of the CompositePkToOneNonPkParent to be deleted; value cannot be null.
     */
    void delete(CompositePkToOneNonPkParent compositePkToOneNonPkParent);

    /**
     * Find all CompositePkToOneNonPkParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompositePkToOneNonPkParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CompositePkToOneNonPkParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CompositePkToOneNonPkParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompositePkToOneNonPkParents.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompositePkToOneNonPkParent> findAll(String query, Pageable pageable);

    /**
     * Exports all CompositePkToOneNonPkParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CompositePkToOneNonPkParents matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CompositePkToOneNonPkParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CompositePkToOneNonPkParent.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated compositePkToNonPkChilds for given CompositePkToOneNonPkParent id.
     *
     * @param createdDate value of createdDate; value cannot be null
     * @param compositeId value of compositeId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CompositePkToNonPkChild instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompositePkToNonPkChild> findAssociatedCompositePkToNonPkChilds(Date createdDate, Integer compositeId, Pageable pageable);

}