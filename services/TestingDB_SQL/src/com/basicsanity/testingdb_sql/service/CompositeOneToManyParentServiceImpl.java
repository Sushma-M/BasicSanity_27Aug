/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeOneToManyChild;
import com.basicsanity.testingdb_sql.CompositeOneToManyParent;
import com.basicsanity.testingdb_sql.CompositeOneToManyParentId;


/**
 * ServiceImpl object for domain model class CompositeOneToManyParent.
 *
 * @see CompositeOneToManyParent
 */
@Service("TestingDB_SQL.CompositeOneToManyParentService")
@Validated
public class CompositeOneToManyParentServiceImpl implements CompositeOneToManyParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOneToManyParentServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.CompositeOneToManyChildService")
    private CompositeOneToManyChildService compositeOneToManyChildService;

    @Autowired
    @Qualifier("TestingDB_SQL.CompositeOneToManyParentDao")
    private WMGenericDao<CompositeOneToManyParent, CompositeOneToManyParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeOneToManyParent, CompositeOneToManyParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyParent create(CompositeOneToManyParent compositeOneToManyParent) {
        LOGGER.debug("Creating a new CompositeOneToManyParent with information: {}", compositeOneToManyParent);

        CompositeOneToManyParent compositeOneToManyParentCreated = this.wmGenericDao.create(compositeOneToManyParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeOneToManyParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyParent getById(CompositeOneToManyParentId compositeonetomanyparentId) {
        LOGGER.debug("Finding CompositeOneToManyParent by id: {}", compositeonetomanyparentId);
        return this.wmGenericDao.findById(compositeonetomanyparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyParent findById(CompositeOneToManyParentId compositeonetomanyparentId) {
        LOGGER.debug("Finding CompositeOneToManyParent by id: {}", compositeonetomanyparentId);
        try {
            return this.wmGenericDao.findById(compositeonetomanyparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeOneToManyParent found with id: {}", compositeonetomanyparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositeOneToManyParent> findByMultipleIds(List<CompositeOneToManyParentId> compositeonetomanyparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeOneToManyParents by ids: {}", compositeonetomanyparentIds);

        return this.wmGenericDao.findByMultipleIds(compositeonetomanyparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyParent update(CompositeOneToManyParent compositeOneToManyParent) {
        LOGGER.debug("Updating CompositeOneToManyParent with information: {}", compositeOneToManyParent);

        this.wmGenericDao.update(compositeOneToManyParent);
        this.wmGenericDao.refresh(compositeOneToManyParent);

        return compositeOneToManyParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyParent delete(CompositeOneToManyParentId compositeonetomanyparentId) {
        LOGGER.debug("Deleting CompositeOneToManyParent with id: {}", compositeonetomanyparentId);
        CompositeOneToManyParent deleted = this.wmGenericDao.findById(compositeonetomanyparentId);
        if (deleted == null) {
            LOGGER.debug("No CompositeOneToManyParent found with id: {}", compositeonetomanyparentId);
            throw new EntityNotFoundException(String.valueOf(compositeonetomanyparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositeOneToManyParent compositeOneToManyParent) {
        LOGGER.debug("Deleting CompositeOneToManyParent with {}", compositeOneToManyParent);
        this.wmGenericDao.delete(compositeOneToManyParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToManyParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOneToManyParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToManyParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOneToManyParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOneToManyParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOneToManyParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToManyChild> findAssociatedCompositeOneToManyChilds(Integer compId, String compName, Pageable pageable) {
        LOGGER.debug("Fetching all associated compositeOneToManyChilds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy.compId = '" + compId + "'");
        queryBuilder.append(" and ");
        queryBuilder.append("compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy.compName = '" + compName + "'");

        return compositeOneToManyChildService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service CompositeOneToManyChildService instance
     */
    protected void setCompositeOneToManyChildService(CompositeOneToManyChildService service) {
        this.compositeOneToManyChildService = service;
    }

}