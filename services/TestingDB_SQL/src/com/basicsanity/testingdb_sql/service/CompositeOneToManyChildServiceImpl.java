/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeOneToManyChild;


/**
 * ServiceImpl object for domain model class CompositeOneToManyChild.
 *
 * @see CompositeOneToManyChild
 */
@Service("TestingDB_SQL.CompositeOneToManyChildService")
@Validated
public class CompositeOneToManyChildServiceImpl implements CompositeOneToManyChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOneToManyChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.CompositeOneToManyChildDao")
    private WMGenericDao<CompositeOneToManyChild, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeOneToManyChild, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyChild create(CompositeOneToManyChild compositeOneToManyChild) {
        LOGGER.debug("Creating a new CompositeOneToManyChild with information: {}", compositeOneToManyChild);

        CompositeOneToManyChild compositeOneToManyChildCreated = this.wmGenericDao.create(compositeOneToManyChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeOneToManyChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyChild getById(Integer compositeonetomanychildId) {
        LOGGER.debug("Finding CompositeOneToManyChild by id: {}", compositeonetomanychildId);
        return this.wmGenericDao.findById(compositeonetomanychildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyChild findById(Integer compositeonetomanychildId) {
        LOGGER.debug("Finding CompositeOneToManyChild by id: {}", compositeonetomanychildId);
        try {
            return this.wmGenericDao.findById(compositeonetomanychildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeOneToManyChild found with id: {}", compositeonetomanychildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositeOneToManyChild> findByMultipleIds(List<Integer> compositeonetomanychildIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeOneToManyChilds by ids: {}", compositeonetomanychildIds);

        return this.wmGenericDao.findByMultipleIds(compositeonetomanychildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyChild update(CompositeOneToManyChild compositeOneToManyChild) {
        LOGGER.debug("Updating CompositeOneToManyChild with information: {}", compositeOneToManyChild);

        this.wmGenericDao.update(compositeOneToManyChild);
        this.wmGenericDao.refresh(compositeOneToManyChild);

        return compositeOneToManyChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToManyChild delete(Integer compositeonetomanychildId) {
        LOGGER.debug("Deleting CompositeOneToManyChild with id: {}", compositeonetomanychildId);
        CompositeOneToManyChild deleted = this.wmGenericDao.findById(compositeonetomanychildId);
        if (deleted == null) {
            LOGGER.debug("No CompositeOneToManyChild found with id: {}", compositeonetomanychildId);
            throw new EntityNotFoundException(String.valueOf(compositeonetomanychildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositeOneToManyChild compositeOneToManyChild) {
        LOGGER.debug("Deleting CompositeOneToManyChild with {}", compositeOneToManyChild);
        this.wmGenericDao.delete(compositeOneToManyChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToManyChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOneToManyChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToManyChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOneToManyChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOneToManyChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOneToManyChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}