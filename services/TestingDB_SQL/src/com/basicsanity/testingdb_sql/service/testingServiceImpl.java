/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.testing;


/**
 * ServiceImpl object for domain model class testing.
 *
 * @see testing
 */
@Service("TestingDB_SQL.testingService")
@Validated
public class testingServiceImpl implements testingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(testingServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.testingDao")
    private WMGenericDao<testing, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<testing, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public testing create(testing testing) {
        LOGGER.debug("Creating a new testing with information: {}", testing);

        testing testingCreated = this.wmGenericDao.create(testing);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(testingCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public testing getById(Integer testingId) {
        LOGGER.debug("Finding testing by id: {}", testingId);
        return this.wmGenericDao.findById(testingId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public testing findById(Integer testingId) {
        LOGGER.debug("Finding testing by id: {}", testingId);
        try {
            return this.wmGenericDao.findById(testingId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No testing found with id: {}", testingId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<testing> findByMultipleIds(List<Integer> testingIds, boolean orderedReturn) {
        LOGGER.debug("Finding testings by ids: {}", testingIds);

        return this.wmGenericDao.findByMultipleIds(testingIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public testing update(testing testing) {
        LOGGER.debug("Updating testing with information: {}", testing);

        this.wmGenericDao.update(testing);
        this.wmGenericDao.refresh(testing);

        return testing;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public testing delete(Integer testingId) {
        LOGGER.debug("Deleting testing with id: {}", testingId);
        testing deleted = this.wmGenericDao.findById(testingId);
        if (deleted == null) {
            LOGGER.debug("No testing found with id: {}", testingId);
            throw new EntityNotFoundException(String.valueOf(testingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(testing testing) {
        LOGGER.debug("Deleting testing with {}", testing);
        this.wmGenericDao.delete(testing);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<testing> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all testings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<testing> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all testings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table testing to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table testing to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}