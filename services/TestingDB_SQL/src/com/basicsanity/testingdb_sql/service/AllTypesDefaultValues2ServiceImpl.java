/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.AllTypesDefaultValues2;


/**
 * ServiceImpl object for domain model class AllTypesDefaultValues2.
 *
 * @see AllTypesDefaultValues2
 */
@Service("TestingDB_SQL.AllTypesDefaultValues2Service")
@Validated
public class AllTypesDefaultValues2ServiceImpl implements AllTypesDefaultValues2Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesDefaultValues2ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.AllTypesDefaultValues2Dao")
    private WMGenericDao<AllTypesDefaultValues2, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllTypesDefaultValues2, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues2 create(AllTypesDefaultValues2 allTypesDefaultValues2) {
        LOGGER.debug("Creating a new AllTypesDefaultValues2 with information: {}", allTypesDefaultValues2);

        AllTypesDefaultValues2 allTypesDefaultValues2Created = this.wmGenericDao.create(allTypesDefaultValues2);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allTypesDefaultValues2Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues2 getById(Integer alltypesdefaultvalues2Id) {
        LOGGER.debug("Finding AllTypesDefaultValues2 by id: {}", alltypesdefaultvalues2Id);
        return this.wmGenericDao.findById(alltypesdefaultvalues2Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues2 findById(Integer alltypesdefaultvalues2Id) {
        LOGGER.debug("Finding AllTypesDefaultValues2 by id: {}", alltypesdefaultvalues2Id);
        try {
            return this.wmGenericDao.findById(alltypesdefaultvalues2Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllTypesDefaultValues2 found with id: {}", alltypesdefaultvalues2Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<AllTypesDefaultValues2> findByMultipleIds(List<Integer> alltypesdefaultvalues2Ids, boolean orderedReturn) {
        LOGGER.debug("Finding AllTypesDefaultValues2s by ids: {}", alltypesdefaultvalues2Ids);

        return this.wmGenericDao.findByMultipleIds(alltypesdefaultvalues2Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues2 update(AllTypesDefaultValues2 allTypesDefaultValues2) {
        LOGGER.debug("Updating AllTypesDefaultValues2 with information: {}", allTypesDefaultValues2);

        this.wmGenericDao.update(allTypesDefaultValues2);
        this.wmGenericDao.refresh(allTypesDefaultValues2);

        return allTypesDefaultValues2;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues2 delete(Integer alltypesdefaultvalues2Id) {
        LOGGER.debug("Deleting AllTypesDefaultValues2 with id: {}", alltypesdefaultvalues2Id);
        AllTypesDefaultValues2 deleted = this.wmGenericDao.findById(alltypesdefaultvalues2Id);
        if (deleted == null) {
            LOGGER.debug("No AllTypesDefaultValues2 found with id: {}", alltypesdefaultvalues2Id);
            throw new EntityNotFoundException(String.valueOf(alltypesdefaultvalues2Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(AllTypesDefaultValues2 allTypesDefaultValues2) {
        LOGGER.debug("Deleting AllTypesDefaultValues2 with {}", allTypesDefaultValues2);
        this.wmGenericDao.delete(allTypesDefaultValues2);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<AllTypesDefaultValues2> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllTypesDefaultValues2s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<AllTypesDefaultValues2> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllTypesDefaultValues2s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table AllTypesDefaultValues2 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table AllTypesDefaultValues2 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}