/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.AllTypesDefaultValues;

/**
 * Service object for domain model class {@link AllTypesDefaultValues}.
 */
public interface AllTypesDefaultValuesService {

    /**
     * Creates a new AllTypesDefaultValues. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AllTypesDefaultValues if any.
     *
     * @param allTypesDefaultValues Details of the AllTypesDefaultValues to be created; value cannot be null.
     * @return The newly created AllTypesDefaultValues.
     */
    AllTypesDefaultValues create(@Valid AllTypesDefaultValues allTypesDefaultValues);


	/**
     * Returns AllTypesDefaultValues by given id if exists.
     *
     * @param alltypesdefaultvaluesId The id of the AllTypesDefaultValues to get; value cannot be null.
     * @return AllTypesDefaultValues associated with the given alltypesdefaultvaluesId.
	 * @throws EntityNotFoundException If no AllTypesDefaultValues is found.
     */
    AllTypesDefaultValues getById(Integer alltypesdefaultvaluesId);

    /**
     * Find and return the AllTypesDefaultValues by given id if exists, returns null otherwise.
     *
     * @param alltypesdefaultvaluesId The id of the AllTypesDefaultValues to get; value cannot be null.
     * @return AllTypesDefaultValues associated with the given alltypesdefaultvaluesId.
     */
    AllTypesDefaultValues findById(Integer alltypesdefaultvaluesId);

	/**
     * Find and return the list of AllTypesDefaultValues by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param alltypesdefaultvaluesIds The id's of the AllTypesDefaultValues to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AllTypesDefaultValues associated with the given alltypesdefaultvaluesIds.
     */
    List<AllTypesDefaultValues> findByMultipleIds(List<Integer> alltypesdefaultvaluesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AllTypesDefaultValues. It replaces all fields of the existing AllTypesDefaultValues with the given allTypesDefaultValues.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AllTypesDefaultValues if any.
     *
     * @param allTypesDefaultValues The details of the AllTypesDefaultValues to be updated; value cannot be null.
     * @return The updated AllTypesDefaultValues.
     * @throws EntityNotFoundException if no AllTypesDefaultValues is found with given input.
     */
    AllTypesDefaultValues update(@Valid AllTypesDefaultValues allTypesDefaultValues);

    /**
     * Deletes an existing AllTypesDefaultValues with the given id.
     *
     * @param alltypesdefaultvaluesId The id of the AllTypesDefaultValues to be deleted; value cannot be null.
     * @return The deleted AllTypesDefaultValues.
     * @throws EntityNotFoundException if no AllTypesDefaultValues found with the given id.
     */
    AllTypesDefaultValues delete(Integer alltypesdefaultvaluesId);

    /**
     * Deletes an existing AllTypesDefaultValues with the given object.
     *
     * @param allTypesDefaultValues The instance of the AllTypesDefaultValues to be deleted; value cannot be null.
     */
    void delete(AllTypesDefaultValues allTypesDefaultValues);

    /**
     * Find all AllTypesDefaultValues matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AllTypesDefaultValues.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AllTypesDefaultValues> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AllTypesDefaultValues matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AllTypesDefaultValues.
     *
     * @see Pageable
     * @see Page
     */
    Page<AllTypesDefaultValues> findAll(String query, Pageable pageable);

    /**
     * Exports all AllTypesDefaultValues matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AllTypesDefaultValues matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AllTypesDefaultValues in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AllTypesDefaultValues.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}