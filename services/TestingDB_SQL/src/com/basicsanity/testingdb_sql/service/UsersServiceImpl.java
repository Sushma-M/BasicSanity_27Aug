/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.SalaryDetails;
import com.basicsanity.testingdb_sql.UserDetails;
import com.basicsanity.testingdb_sql.Users;


/**
 * ServiceImpl object for domain model class Users.
 *
 * @see Users
 */
@Service("TestingDB_SQL.UsersService")
@Validated
public class UsersServiceImpl implements UsersService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsersServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.SalaryDetailsService")
    private SalaryDetailsService salaryDetailsService;

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.ServiceService")
    private ServiceService serviceService;

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.UserDetailsService")
    private UserDetailsService userDetailsService;

    @Autowired
    @Qualifier("TestingDB_SQL.UsersDao")
    private WMGenericDao<Users, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Users, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Users create(Users usersInstance) {
        LOGGER.debug("Creating a new Users with information: {}", usersInstance);

        Users usersInstanceCreated = this.wmGenericDao.create(usersInstance);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(usersInstanceCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Users getById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        return this.wmGenericDao.findById(usersId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Users findById(Integer usersId) {
        LOGGER.debug("Finding Users by id: {}", usersId);
        try {
            return this.wmGenericDao.findById(usersId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Users found with id: {}", usersId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Users> findByMultipleIds(List<Integer> usersIds, boolean orderedReturn) {
        LOGGER.debug("Finding Users by ids: {}", usersIds);

        return this.wmGenericDao.findByMultipleIds(usersIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Users update(Users usersInstance) {
        LOGGER.debug("Updating Users with information: {}", usersInstance);

        this.wmGenericDao.update(usersInstance);
        this.wmGenericDao.refresh(usersInstance);

        return usersInstance;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Users delete(Integer usersId) {
        LOGGER.debug("Deleting Users with id: {}", usersId);
        Users deleted = this.wmGenericDao.findById(usersId);
        if (deleted == null) {
            LOGGER.debug("No Users found with id: {}", usersId);
            throw new EntityNotFoundException(String.valueOf(usersId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Users usersInstance) {
        LOGGER.debug("Deleting Users with {}", usersInstance);
        this.wmGenericDao.delete(usersInstance);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Users> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Users");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Users to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Users to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<SalaryDetails> findAssociatedSalaryDetailses(Integer users, Pageable pageable) {
        LOGGER.debug("Fetching all associated salaryDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.users = '" + users + "'");

        return salaryDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<com.basicsanity.testingdb_sql.Service> findAssociatedServices(Integer users, Pageable pageable) {
        LOGGER.debug("Fetching all associated services");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("users.users = '" + users + "'");

        return serviceService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<UserDetails> findAssociatedUserDetailses(Integer users, Pageable pageable) {
        LOGGER.debug("Fetching all associated userDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usersByUsers.users = '" + users + "'");

        return userDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SalaryDetailsService instance
     */
    protected void setSalaryDetailsService(SalaryDetailsService service) {
        this.salaryDetailsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ServiceService instance
     */
    protected void setServiceService(ServiceService service) {
        this.serviceService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UserDetailsService instance
     */
    protected void setUserDetailsService(UserDetailsService service) {
        this.userDetailsService = service;
    }

}