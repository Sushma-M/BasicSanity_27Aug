/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.UniqueIdTable;


/**
 * ServiceImpl object for domain model class UniqueIdTable.
 *
 * @see UniqueIdTable
 */
@Service("TestingDB_SQL.UniqueIdTableService")
@Validated
public class UniqueIdTableServiceImpl implements UniqueIdTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UniqueIdTableServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.UniqueIdTableDao")
    private WMGenericDao<UniqueIdTable, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UniqueIdTable, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public UniqueIdTable create(UniqueIdTable uniqueIdTable) {
        LOGGER.debug("Creating a new UniqueIdTable with information: {}", uniqueIdTable);

        UniqueIdTable uniqueIdTableCreated = this.wmGenericDao.create(uniqueIdTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(uniqueIdTableCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public UniqueIdTable getById(String uniqueidtableId) {
        LOGGER.debug("Finding UniqueIdTable by id: {}", uniqueidtableId);
        return this.wmGenericDao.findById(uniqueidtableId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public UniqueIdTable findById(String uniqueidtableId) {
        LOGGER.debug("Finding UniqueIdTable by id: {}", uniqueidtableId);
        try {
            return this.wmGenericDao.findById(uniqueidtableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UniqueIdTable found with id: {}", uniqueidtableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<UniqueIdTable> findByMultipleIds(List<String> uniqueidtableIds, boolean orderedReturn) {
        LOGGER.debug("Finding UniqueIdTables by ids: {}", uniqueidtableIds);

        return this.wmGenericDao.findByMultipleIds(uniqueidtableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public UniqueIdTable update(UniqueIdTable uniqueIdTable) {
        LOGGER.debug("Updating UniqueIdTable with information: {}", uniqueIdTable);

        this.wmGenericDao.update(uniqueIdTable);
        this.wmGenericDao.refresh(uniqueIdTable);

        return uniqueIdTable;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public UniqueIdTable delete(String uniqueidtableId) {
        LOGGER.debug("Deleting UniqueIdTable with id: {}", uniqueidtableId);
        UniqueIdTable deleted = this.wmGenericDao.findById(uniqueidtableId);
        if (deleted == null) {
            LOGGER.debug("No UniqueIdTable found with id: {}", uniqueidtableId);
            throw new EntityNotFoundException(String.valueOf(uniqueidtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(UniqueIdTable uniqueIdTable) {
        LOGGER.debug("Deleting UniqueIdTable with {}", uniqueIdTable);
        this.wmGenericDao.delete(uniqueIdTable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<UniqueIdTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UniqueIdTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<UniqueIdTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UniqueIdTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table UniqueIdTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table UniqueIdTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}