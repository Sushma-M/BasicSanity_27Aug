/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToManyChild;


/**
 * ServiceImpl object for domain model class OneToManyChild.
 *
 * @see OneToManyChild
 */
@Service("TestingDB_SQL.OneToManyChildService")
@Validated
public class OneToManyChildServiceImpl implements OneToManyChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToManyChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.OneToManyChildDao")
    private WMGenericDao<OneToManyChild, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OneToManyChild, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyChild create(OneToManyChild oneToManyChild) {
        LOGGER.debug("Creating a new OneToManyChild with information: {}", oneToManyChild);

        OneToManyChild oneToManyChildCreated = this.wmGenericDao.create(oneToManyChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(oneToManyChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyChild getById(Integer onetomanychildId) {
        LOGGER.debug("Finding OneToManyChild by id: {}", onetomanychildId);
        return this.wmGenericDao.findById(onetomanychildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyChild findById(Integer onetomanychildId) {
        LOGGER.debug("Finding OneToManyChild by id: {}", onetomanychildId);
        try {
            return this.wmGenericDao.findById(onetomanychildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OneToManyChild found with id: {}", onetomanychildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OneToManyChild> findByMultipleIds(List<Integer> onetomanychildIds, boolean orderedReturn) {
        LOGGER.debug("Finding OneToManyChilds by ids: {}", onetomanychildIds);

        return this.wmGenericDao.findByMultipleIds(onetomanychildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyChild update(OneToManyChild oneToManyChild) {
        LOGGER.debug("Updating OneToManyChild with information: {}", oneToManyChild);

        this.wmGenericDao.update(oneToManyChild);
        this.wmGenericDao.refresh(oneToManyChild);

        return oneToManyChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToManyChild delete(Integer onetomanychildId) {
        LOGGER.debug("Deleting OneToManyChild with id: {}", onetomanychildId);
        OneToManyChild deleted = this.wmGenericDao.findById(onetomanychildId);
        if (deleted == null) {
            LOGGER.debug("No OneToManyChild found with id: {}", onetomanychildId);
            throw new EntityNotFoundException(String.valueOf(onetomanychildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OneToManyChild oneToManyChild) {
        LOGGER.debug("Deleting OneToManyChild with {}", oneToManyChild);
        this.wmGenericDao.delete(oneToManyChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToManyChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OneToManyChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToManyChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OneToManyChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToManyChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToManyChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}