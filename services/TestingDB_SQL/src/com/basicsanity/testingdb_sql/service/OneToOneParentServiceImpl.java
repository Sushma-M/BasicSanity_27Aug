/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneParent;


/**
 * ServiceImpl object for domain model class OneToOneParent.
 *
 * @see OneToOneParent
 */
@Service("TestingDB_SQL.OneToOneParentService")
@Validated
public class OneToOneParentServiceImpl implements OneToOneParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToOneParentServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.OneToOneParentDao")
    private WMGenericDao<OneToOneParent, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OneToOneParent, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneParent create(OneToOneParent oneToOneParent) {
        LOGGER.debug("Creating a new OneToOneParent with information: {}", oneToOneParent);

        OneToOneParent oneToOneParentCreated = this.wmGenericDao.create(oneToOneParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(oneToOneParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneParent getById(String onetooneparentId) {
        LOGGER.debug("Finding OneToOneParent by id: {}", onetooneparentId);
        return this.wmGenericDao.findById(onetooneparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneParent findById(String onetooneparentId) {
        LOGGER.debug("Finding OneToOneParent by id: {}", onetooneparentId);
        try {
            return this.wmGenericDao.findById(onetooneparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OneToOneParent found with id: {}", onetooneparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OneToOneParent> findByMultipleIds(List<String> onetooneparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding OneToOneParents by ids: {}", onetooneparentIds);

        return this.wmGenericDao.findByMultipleIds(onetooneparentIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneParent getByIdAndColumn2(String id, String column2) {
        Map<String, Object> idAndColumn2Map = new HashMap<>();
        idAndColumn2Map.put("id", id);
        idAndColumn2Map.put("column2", column2);

        LOGGER.debug("Finding OneToOneParent by unique keys: {}", idAndColumn2Map);
        return this.wmGenericDao.findByUniqueKey(idAndColumn2Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneParent update(OneToOneParent oneToOneParent) {
        LOGGER.debug("Updating OneToOneParent with information: {}", oneToOneParent);

        this.wmGenericDao.update(oneToOneParent);
        this.wmGenericDao.refresh(oneToOneParent);

        return oneToOneParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneParent delete(String onetooneparentId) {
        LOGGER.debug("Deleting OneToOneParent with id: {}", onetooneparentId);
        OneToOneParent deleted = this.wmGenericDao.findById(onetooneparentId);
        if (deleted == null) {
            LOGGER.debug("No OneToOneParent found with id: {}", onetooneparentId);
            throw new EntityNotFoundException(String.valueOf(onetooneparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OneToOneParent oneToOneParent) {
        LOGGER.debug("Deleting OneToOneParent with {}", oneToOneParent);
        this.wmGenericDao.delete(oneToOneParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}