/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.AllTypesDefaultValues;


/**
 * ServiceImpl object for domain model class AllTypesDefaultValues.
 *
 * @see AllTypesDefaultValues
 */
@Service("TestingDB_SQL.AllTypesDefaultValuesService")
@Validated
public class AllTypesDefaultValuesServiceImpl implements AllTypesDefaultValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesDefaultValuesServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.AllTypesDefaultValuesDao")
    private WMGenericDao<AllTypesDefaultValues, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllTypesDefaultValues, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues create(AllTypesDefaultValues allTypesDefaultValues) {
        LOGGER.debug("Creating a new AllTypesDefaultValues with information: {}", allTypesDefaultValues);

        AllTypesDefaultValues allTypesDefaultValuesCreated = this.wmGenericDao.create(allTypesDefaultValues);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(allTypesDefaultValuesCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues getById(Integer alltypesdefaultvaluesId) {
        LOGGER.debug("Finding AllTypesDefaultValues by id: {}", alltypesdefaultvaluesId);
        return this.wmGenericDao.findById(alltypesdefaultvaluesId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues findById(Integer alltypesdefaultvaluesId) {
        LOGGER.debug("Finding AllTypesDefaultValues by id: {}", alltypesdefaultvaluesId);
        try {
            return this.wmGenericDao.findById(alltypesdefaultvaluesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AllTypesDefaultValues found with id: {}", alltypesdefaultvaluesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<AllTypesDefaultValues> findByMultipleIds(List<Integer> alltypesdefaultvaluesIds, boolean orderedReturn) {
        LOGGER.debug("Finding AllTypesDefaultValues by ids: {}", alltypesdefaultvaluesIds);

        return this.wmGenericDao.findByMultipleIds(alltypesdefaultvaluesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues update(AllTypesDefaultValues allTypesDefaultValues) {
        LOGGER.debug("Updating AllTypesDefaultValues with information: {}", allTypesDefaultValues);

        this.wmGenericDao.update(allTypesDefaultValues);
        this.wmGenericDao.refresh(allTypesDefaultValues);

        return allTypesDefaultValues;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public AllTypesDefaultValues delete(Integer alltypesdefaultvaluesId) {
        LOGGER.debug("Deleting AllTypesDefaultValues with id: {}", alltypesdefaultvaluesId);
        AllTypesDefaultValues deleted = this.wmGenericDao.findById(alltypesdefaultvaluesId);
        if (deleted == null) {
            LOGGER.debug("No AllTypesDefaultValues found with id: {}", alltypesdefaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(alltypesdefaultvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(AllTypesDefaultValues allTypesDefaultValues) {
        LOGGER.debug("Deleting AllTypesDefaultValues with {}", allTypesDefaultValues);
        this.wmGenericDao.delete(allTypesDefaultValues);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<AllTypesDefaultValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllTypesDefaultValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<AllTypesDefaultValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllTypesDefaultValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table AllTypesDefaultValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table AllTypesDefaultValues to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}