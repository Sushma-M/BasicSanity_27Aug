/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeOneToManyChild;
import com.basicsanity.testingdb_sql.CompositeOneToManyParent;
import com.basicsanity.testingdb_sql.CompositeOneToManyParentId;

/**
 * Service object for domain model class {@link CompositeOneToManyParent}.
 */
public interface CompositeOneToManyParentService {

    /**
     * Creates a new CompositeOneToManyParent. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompositeOneToManyParent if any.
     *
     * @param compositeOneToManyParent Details of the CompositeOneToManyParent to be created; value cannot be null.
     * @return The newly created CompositeOneToManyParent.
     */
    CompositeOneToManyParent create(@Valid CompositeOneToManyParent compositeOneToManyParent);


	/**
     * Returns CompositeOneToManyParent by given id if exists.
     *
     * @param compositeonetomanyparentId The id of the CompositeOneToManyParent to get; value cannot be null.
     * @return CompositeOneToManyParent associated with the given compositeonetomanyparentId.
	 * @throws EntityNotFoundException If no CompositeOneToManyParent is found.
     */
    CompositeOneToManyParent getById(CompositeOneToManyParentId compositeonetomanyparentId);

    /**
     * Find and return the CompositeOneToManyParent by given id if exists, returns null otherwise.
     *
     * @param compositeonetomanyparentId The id of the CompositeOneToManyParent to get; value cannot be null.
     * @return CompositeOneToManyParent associated with the given compositeonetomanyparentId.
     */
    CompositeOneToManyParent findById(CompositeOneToManyParentId compositeonetomanyparentId);

	/**
     * Find and return the list of CompositeOneToManyParents by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param compositeonetomanyparentIds The id's of the CompositeOneToManyParent to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return CompositeOneToManyParents associated with the given compositeonetomanyparentIds.
     */
    List<CompositeOneToManyParent> findByMultipleIds(List<CompositeOneToManyParentId> compositeonetomanyparentIds, boolean orderedReturn);


    /**
     * Updates the details of an existing CompositeOneToManyParent. It replaces all fields of the existing CompositeOneToManyParent with the given compositeOneToManyParent.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CompositeOneToManyParent if any.
     *
     * @param compositeOneToManyParent The details of the CompositeOneToManyParent to be updated; value cannot be null.
     * @return The updated CompositeOneToManyParent.
     * @throws EntityNotFoundException if no CompositeOneToManyParent is found with given input.
     */
    CompositeOneToManyParent update(@Valid CompositeOneToManyParent compositeOneToManyParent);

    /**
     * Deletes an existing CompositeOneToManyParent with the given id.
     *
     * @param compositeonetomanyparentId The id of the CompositeOneToManyParent to be deleted; value cannot be null.
     * @return The deleted CompositeOneToManyParent.
     * @throws EntityNotFoundException if no CompositeOneToManyParent found with the given id.
     */
    CompositeOneToManyParent delete(CompositeOneToManyParentId compositeonetomanyparentId);

    /**
     * Deletes an existing CompositeOneToManyParent with the given object.
     *
     * @param compositeOneToManyParent The instance of the CompositeOneToManyParent to be deleted; value cannot be null.
     */
    void delete(CompositeOneToManyParent compositeOneToManyParent);

    /**
     * Find all CompositeOneToManyParents matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompositeOneToManyParents.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<CompositeOneToManyParent> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all CompositeOneToManyParents matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CompositeOneToManyParents.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompositeOneToManyParent> findAll(String query, Pageable pageable);

    /**
     * Exports all CompositeOneToManyParents matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all CompositeOneToManyParents matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the CompositeOneToManyParents in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the CompositeOneToManyParent.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated compositeOneToManyChilds for given CompositeOneToManyParent id.
     *
     * @param compId value of compId; value cannot be null
     * @param compName value of compName; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated CompositeOneToManyChild instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<CompositeOneToManyChild> findAssociatedCompositeOneToManyChilds(Integer compId, String compName, Pageable pageable);

}