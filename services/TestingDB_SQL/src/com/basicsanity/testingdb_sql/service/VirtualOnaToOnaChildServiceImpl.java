/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOnaToOnaChild;
import com.basicsanity.testingdb_sql.VirtualOnaToOnaChildId;


/**
 * ServiceImpl object for domain model class VirtualOnaToOnaChild.
 *
 * @see VirtualOnaToOnaChild
 */
@Service("TestingDB_SQL.VirtualOnaToOnaChildService")
@Validated
public class VirtualOnaToOnaChildServiceImpl implements VirtualOnaToOnaChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOnaToOnaChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.VirtualOnaToOnaChildDao")
    private WMGenericDao<VirtualOnaToOnaChild, VirtualOnaToOnaChildId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualOnaToOnaChild, VirtualOnaToOnaChildId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOnaToOnaChild create(VirtualOnaToOnaChild virtualOnaToOnaChild) {
        LOGGER.debug("Creating a new VirtualOnaToOnaChild with information: {}", virtualOnaToOnaChild);

        VirtualOnaToOnaChild virtualOnaToOnaChildCreated = this.wmGenericDao.create(virtualOnaToOnaChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualOnaToOnaChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOnaToOnaChild getById(VirtualOnaToOnaChildId virtualonatoonachildId) {
        LOGGER.debug("Finding VirtualOnaToOnaChild by id: {}", virtualonatoonachildId);
        return this.wmGenericDao.findById(virtualonatoonachildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOnaToOnaChild findById(VirtualOnaToOnaChildId virtualonatoonachildId) {
        LOGGER.debug("Finding VirtualOnaToOnaChild by id: {}", virtualonatoonachildId);
        try {
            return this.wmGenericDao.findById(virtualonatoonachildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualOnaToOnaChild found with id: {}", virtualonatoonachildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<VirtualOnaToOnaChild> findByMultipleIds(List<VirtualOnaToOnaChildId> virtualonatoonachildIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualOnaToOnaChilds by ids: {}", virtualonatoonachildIds);

        return this.wmGenericDao.findByMultipleIds(virtualonatoonachildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOnaToOnaChild update(VirtualOnaToOnaChild virtualOnaToOnaChild) {
        LOGGER.debug("Updating VirtualOnaToOnaChild with information: {}", virtualOnaToOnaChild);

        this.wmGenericDao.update(virtualOnaToOnaChild);
        this.wmGenericDao.refresh(virtualOnaToOnaChild);

        return virtualOnaToOnaChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOnaToOnaChild delete(VirtualOnaToOnaChildId virtualonatoonachildId) {
        LOGGER.debug("Deleting VirtualOnaToOnaChild with id: {}", virtualonatoonachildId);
        VirtualOnaToOnaChild deleted = this.wmGenericDao.findById(virtualonatoonachildId);
        if (deleted == null) {
            LOGGER.debug("No VirtualOnaToOnaChild found with id: {}", virtualonatoonachildId);
            throw new EntityNotFoundException(String.valueOf(virtualonatoonachildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(VirtualOnaToOnaChild virtualOnaToOnaChild) {
        LOGGER.debug("Deleting VirtualOnaToOnaChild with {}", virtualOnaToOnaChild);
        this.wmGenericDao.delete(virtualOnaToOnaChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOnaToOnaChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOnaToOnaChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOnaToOnaChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOnaToOnaChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOnaToOnaChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOnaToOnaChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}