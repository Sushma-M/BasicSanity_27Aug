/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table46;
import com.basicsanity.testingdb_sql.Table47;


/**
 * ServiceImpl object for domain model class Table46.
 *
 * @see Table46
 */
@Service("TestingDB_SQL.Table46Service")
@Validated
public class Table46ServiceImpl implements Table46Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table46ServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.Table47Service")
    private Table47Service table47Service;

    @Autowired
    @Qualifier("TestingDB_SQL.Table46Dao")
    private WMGenericDao<Table46, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table46, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table46 create(Table46 table46) {
        LOGGER.debug("Creating a new Table46 with information: {}", table46);

        Table46 table46Created = this.wmGenericDao.create(table46);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table46Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table46 getById(Integer table46Id) {
        LOGGER.debug("Finding Table46 by id: {}", table46Id);
        return this.wmGenericDao.findById(table46Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table46 findById(Integer table46Id) {
        LOGGER.debug("Finding Table46 by id: {}", table46Id);
        try {
            return this.wmGenericDao.findById(table46Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table46 found with id: {}", table46Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table46> findByMultipleIds(List<Integer> table46Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table46s by ids: {}", table46Ids);

        return this.wmGenericDao.findByMultipleIds(table46Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table46 update(Table46 table46) {
        LOGGER.debug("Updating Table46 with information: {}", table46);

        this.wmGenericDao.update(table46);
        this.wmGenericDao.refresh(table46);

        return table46;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table46 delete(Integer table46Id) {
        LOGGER.debug("Deleting Table46 with id: {}", table46Id);
        Table46 deleted = this.wmGenericDao.findById(table46Id);
        if (deleted == null) {
            LOGGER.debug("No Table46 found with id: {}", table46Id);
            throw new EntityNotFoundException(String.valueOf(table46Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table46 table46) {
        LOGGER.debug("Deleting Table46 with {}", table46);
        this.wmGenericDao.delete(table46);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table46> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table46s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table46> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table46s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table46 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table46 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table47> findAssociatedTable47s(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated table47s");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("table46.id = '" + id + "'");

        return table47Service.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service Table47Service instance
     */
    protected void setTable47Service(Table47Service service) {
        this.table47Service = service;
    }

}