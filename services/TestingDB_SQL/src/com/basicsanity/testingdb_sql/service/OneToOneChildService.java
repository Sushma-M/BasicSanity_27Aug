/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneChild;

/**
 * Service object for domain model class {@link OneToOneChild}.
 */
public interface OneToOneChildService {

    /**
     * Creates a new OneToOneChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneChild if any.
     *
     * @param oneToOneChild Details of the OneToOneChild to be created; value cannot be null.
     * @return The newly created OneToOneChild.
     */
    OneToOneChild create(@Valid OneToOneChild oneToOneChild);


	/**
     * Returns OneToOneChild by given id if exists.
     *
     * @param onetoonechildId The id of the OneToOneChild to get; value cannot be null.
     * @return OneToOneChild associated with the given onetoonechildId.
	 * @throws EntityNotFoundException If no OneToOneChild is found.
     */
    OneToOneChild getById(String onetoonechildId);

    /**
     * Find and return the OneToOneChild by given id if exists, returns null otherwise.
     *
     * @param onetoonechildId The id of the OneToOneChild to get; value cannot be null.
     * @return OneToOneChild associated with the given onetoonechildId.
     */
    OneToOneChild findById(String onetoonechildId);

	/**
     * Find and return the list of OneToOneChilds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param onetoonechildIds The id's of the OneToOneChild to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OneToOneChilds associated with the given onetoonechildIds.
     */
    List<OneToOneChild> findByMultipleIds(List<String> onetoonechildIds, boolean orderedReturn);


    /**
     * Updates the details of an existing OneToOneChild. It replaces all fields of the existing OneToOneChild with the given oneToOneChild.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneChild if any.
     *
     * @param oneToOneChild The details of the OneToOneChild to be updated; value cannot be null.
     * @return The updated OneToOneChild.
     * @throws EntityNotFoundException if no OneToOneChild is found with given input.
     */
    OneToOneChild update(@Valid OneToOneChild oneToOneChild);

    /**
     * Deletes an existing OneToOneChild with the given id.
     *
     * @param onetoonechildId The id of the OneToOneChild to be deleted; value cannot be null.
     * @return The deleted OneToOneChild.
     * @throws EntityNotFoundException if no OneToOneChild found with the given id.
     */
    OneToOneChild delete(String onetoonechildId);

    /**
     * Deletes an existing OneToOneChild with the given object.
     *
     * @param oneToOneChild The instance of the OneToOneChild to be deleted; value cannot be null.
     */
    void delete(OneToOneChild oneToOneChild);

    /**
     * Find all OneToOneChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OneToOneChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OneToOneChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneChilds.
     *
     * @see Pageable
     * @see Page
     */
    Page<OneToOneChild> findAll(String query, Pageable pageable);

    /**
     * Exports all OneToOneChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OneToOneChilds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OneToOneChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OneToOneChild.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}