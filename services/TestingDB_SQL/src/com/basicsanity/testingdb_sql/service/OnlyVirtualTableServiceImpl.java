/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OnlyVirtualTable;
import com.basicsanity.testingdb_sql.OnlyVirtualTableId;


/**
 * ServiceImpl object for domain model class OnlyVirtualTable.
 *
 * @see OnlyVirtualTable
 */
@Service("TestingDB_SQL.OnlyVirtualTableService")
@Validated
public class OnlyVirtualTableServiceImpl implements OnlyVirtualTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OnlyVirtualTableServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.OnlyVirtualTableDao")
    private WMGenericDao<OnlyVirtualTable, OnlyVirtualTableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OnlyVirtualTable, OnlyVirtualTableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OnlyVirtualTable create(OnlyVirtualTable onlyVirtualTable) {
        LOGGER.debug("Creating a new OnlyVirtualTable with information: {}", onlyVirtualTable);

        OnlyVirtualTable onlyVirtualTableCreated = this.wmGenericDao.create(onlyVirtualTable);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(onlyVirtualTableCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OnlyVirtualTable getById(OnlyVirtualTableId onlyvirtualtableId) {
        LOGGER.debug("Finding OnlyVirtualTable by id: {}", onlyvirtualtableId);
        return this.wmGenericDao.findById(onlyvirtualtableId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OnlyVirtualTable findById(OnlyVirtualTableId onlyvirtualtableId) {
        LOGGER.debug("Finding OnlyVirtualTable by id: {}", onlyvirtualtableId);
        try {
            return this.wmGenericDao.findById(onlyvirtualtableId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OnlyVirtualTable found with id: {}", onlyvirtualtableId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OnlyVirtualTable> findByMultipleIds(List<OnlyVirtualTableId> onlyvirtualtableIds, boolean orderedReturn) {
        LOGGER.debug("Finding OnlyVirtualTables by ids: {}", onlyvirtualtableIds);

        return this.wmGenericDao.findByMultipleIds(onlyvirtualtableIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OnlyVirtualTable update(OnlyVirtualTable onlyVirtualTable) {
        LOGGER.debug("Updating OnlyVirtualTable with information: {}", onlyVirtualTable);

        this.wmGenericDao.update(onlyVirtualTable);
        this.wmGenericDao.refresh(onlyVirtualTable);

        return onlyVirtualTable;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OnlyVirtualTable delete(OnlyVirtualTableId onlyvirtualtableId) {
        LOGGER.debug("Deleting OnlyVirtualTable with id: {}", onlyvirtualtableId);
        OnlyVirtualTable deleted = this.wmGenericDao.findById(onlyvirtualtableId);
        if (deleted == null) {
            LOGGER.debug("No OnlyVirtualTable found with id: {}", onlyvirtualtableId);
            throw new EntityNotFoundException(String.valueOf(onlyvirtualtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OnlyVirtualTable onlyVirtualTable) {
        LOGGER.debug("Deleting OnlyVirtualTable with {}", onlyVirtualTable);
        this.wmGenericDao.delete(onlyVirtualTable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OnlyVirtualTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OnlyVirtualTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OnlyVirtualTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OnlyVirtualTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OnlyVirtualTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OnlyVirtualTable to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}