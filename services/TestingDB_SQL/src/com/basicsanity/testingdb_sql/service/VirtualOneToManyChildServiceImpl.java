/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOneToManyChild;
import com.basicsanity.testingdb_sql.VirtualOneToManyChildId;


/**
 * ServiceImpl object for domain model class VirtualOneToManyChild.
 *
 * @see VirtualOneToManyChild
 */
@Service("TestingDB_SQL.VirtualOneToManyChildService")
@Validated
public class VirtualOneToManyChildServiceImpl implements VirtualOneToManyChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOneToManyChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.VirtualOneToManyChildDao")
    private WMGenericDao<VirtualOneToManyChild, VirtualOneToManyChildId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualOneToManyChild, VirtualOneToManyChildId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyChild create(VirtualOneToManyChild virtualOneToManyChild) {
        LOGGER.debug("Creating a new VirtualOneToManyChild with information: {}", virtualOneToManyChild);

        VirtualOneToManyChild virtualOneToManyChildCreated = this.wmGenericDao.create(virtualOneToManyChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(virtualOneToManyChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyChild getById(VirtualOneToManyChildId virtualonetomanychildId) {
        LOGGER.debug("Finding VirtualOneToManyChild by id: {}", virtualonetomanychildId);
        return this.wmGenericDao.findById(virtualonetomanychildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyChild findById(VirtualOneToManyChildId virtualonetomanychildId) {
        LOGGER.debug("Finding VirtualOneToManyChild by id: {}", virtualonetomanychildId);
        try {
            return this.wmGenericDao.findById(virtualonetomanychildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No VirtualOneToManyChild found with id: {}", virtualonetomanychildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<VirtualOneToManyChild> findByMultipleIds(List<VirtualOneToManyChildId> virtualonetomanychildIds, boolean orderedReturn) {
        LOGGER.debug("Finding VirtualOneToManyChilds by ids: {}", virtualonetomanychildIds);

        return this.wmGenericDao.findByMultipleIds(virtualonetomanychildIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyChild getByVirtualChildId(String virtualChildId) {
        Map<String, Object> virtualChildIdMap = new HashMap<>();
        virtualChildIdMap.put("virtualChildId", virtualChildId);

        LOGGER.debug("Finding VirtualOneToManyChild by unique keys: {}", virtualChildIdMap);
        return this.wmGenericDao.findByUniqueKey(virtualChildIdMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyChild update(VirtualOneToManyChild virtualOneToManyChild) {
        LOGGER.debug("Updating VirtualOneToManyChild with information: {}", virtualOneToManyChild);

        this.wmGenericDao.update(virtualOneToManyChild);
        this.wmGenericDao.refresh(virtualOneToManyChild);

        return virtualOneToManyChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public VirtualOneToManyChild delete(VirtualOneToManyChildId virtualonetomanychildId) {
        LOGGER.debug("Deleting VirtualOneToManyChild with id: {}", virtualonetomanychildId);
        VirtualOneToManyChild deleted = this.wmGenericDao.findById(virtualonetomanychildId);
        if (deleted == null) {
            LOGGER.debug("No VirtualOneToManyChild found with id: {}", virtualonetomanychildId);
            throw new EntityNotFoundException(String.valueOf(virtualonetomanychildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(VirtualOneToManyChild virtualOneToManyChild) {
        LOGGER.debug("Deleting VirtualOneToManyChild with {}", virtualOneToManyChild);
        this.wmGenericDao.delete(virtualOneToManyChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOneToManyChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOneToManyChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<VirtualOneToManyChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualOneToManyChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOneToManyChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table VirtualOneToManyChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}