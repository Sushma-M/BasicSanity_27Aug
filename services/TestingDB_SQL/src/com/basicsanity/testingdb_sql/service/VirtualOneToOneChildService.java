/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.VirtualOneToOneChild;
import com.basicsanity.testingdb_sql.VirtualOneToOneChildId;

/**
 * Service object for domain model class {@link VirtualOneToOneChild}.
 */
public interface VirtualOneToOneChildService {

    /**
     * Creates a new VirtualOneToOneChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualOneToOneChild if any.
     *
     * @param virtualOneToOneChild Details of the VirtualOneToOneChild to be created; value cannot be null.
     * @return The newly created VirtualOneToOneChild.
     */
    VirtualOneToOneChild create(@Valid VirtualOneToOneChild virtualOneToOneChild);


	/**
     * Returns VirtualOneToOneChild by given id if exists.
     *
     * @param virtualonetoonechildId The id of the VirtualOneToOneChild to get; value cannot be null.
     * @return VirtualOneToOneChild associated with the given virtualonetoonechildId.
	 * @throws EntityNotFoundException If no VirtualOneToOneChild is found.
     */
    VirtualOneToOneChild getById(VirtualOneToOneChildId virtualonetoonechildId);

    /**
     * Find and return the VirtualOneToOneChild by given id if exists, returns null otherwise.
     *
     * @param virtualonetoonechildId The id of the VirtualOneToOneChild to get; value cannot be null.
     * @return VirtualOneToOneChild associated with the given virtualonetoonechildId.
     */
    VirtualOneToOneChild findById(VirtualOneToOneChildId virtualonetoonechildId);

	/**
     * Find and return the list of VirtualOneToOneChilds by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param virtualonetoonechildIds The id's of the VirtualOneToOneChild to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return VirtualOneToOneChilds associated with the given virtualonetoonechildIds.
     */
    List<VirtualOneToOneChild> findByMultipleIds(List<VirtualOneToOneChildId> virtualonetoonechildIds, boolean orderedReturn);

    /**
     * Find and return the VirtualOneToOneChild for given virtualOneToOneParent  if exists.
     *
     * @param virtualOneToOneParent value of virtualOneToOneParent; value cannot be null.
     * @return VirtualOneToOneChild associated with the given inputs.
     * @throws EntityNotFoundException if no matching VirtualOneToOneChild found.
     */
    VirtualOneToOneChild getByVirtualOneToOneParent(Integer virtualOneToOneParent);

    /**
     * Updates the details of an existing VirtualOneToOneChild. It replaces all fields of the existing VirtualOneToOneChild with the given virtualOneToOneChild.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualOneToOneChild if any.
     *
     * @param virtualOneToOneChild The details of the VirtualOneToOneChild to be updated; value cannot be null.
     * @return The updated VirtualOneToOneChild.
     * @throws EntityNotFoundException if no VirtualOneToOneChild is found with given input.
     */
    VirtualOneToOneChild update(@Valid VirtualOneToOneChild virtualOneToOneChild);

    /**
     * Deletes an existing VirtualOneToOneChild with the given id.
     *
     * @param virtualonetoonechildId The id of the VirtualOneToOneChild to be deleted; value cannot be null.
     * @return The deleted VirtualOneToOneChild.
     * @throws EntityNotFoundException if no VirtualOneToOneChild found with the given id.
     */
    VirtualOneToOneChild delete(VirtualOneToOneChildId virtualonetoonechildId);

    /**
     * Deletes an existing VirtualOneToOneChild with the given object.
     *
     * @param virtualOneToOneChild The instance of the VirtualOneToOneChild to be deleted; value cannot be null.
     */
    void delete(VirtualOneToOneChild virtualOneToOneChild);

    /**
     * Find all VirtualOneToOneChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualOneToOneChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<VirtualOneToOneChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all VirtualOneToOneChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualOneToOneChilds.
     *
     * @see Pageable
     * @see Page
     */
    Page<VirtualOneToOneChild> findAll(String query, Pageable pageable);

    /**
     * Exports all VirtualOneToOneChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all VirtualOneToOneChilds matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the VirtualOneToOneChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the VirtualOneToOneChild.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}