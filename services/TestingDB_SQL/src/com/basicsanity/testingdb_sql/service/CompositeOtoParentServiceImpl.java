/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeOtoParent;
import com.basicsanity.testingdb_sql.CompositeOtoParentId;


/**
 * ServiceImpl object for domain model class CompositeOtoParent.
 *
 * @see CompositeOtoParent
 */
@Service("TestingDB_SQL.CompositeOtoParentService")
@Validated
public class CompositeOtoParentServiceImpl implements CompositeOtoParentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOtoParentServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.CompositeOtoParentDao")
    private WMGenericDao<CompositeOtoParent, CompositeOtoParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeOtoParent, CompositeOtoParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoParent create(CompositeOtoParent compositeOtoParent) {
        LOGGER.debug("Creating a new CompositeOtoParent with information: {}", compositeOtoParent);

        CompositeOtoParent compositeOtoParentCreated = this.wmGenericDao.create(compositeOtoParent);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeOtoParentCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoParent getById(CompositeOtoParentId compositeotoparentId) {
        LOGGER.debug("Finding CompositeOtoParent by id: {}", compositeotoparentId);
        return this.wmGenericDao.findById(compositeotoparentId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoParent findById(CompositeOtoParentId compositeotoparentId) {
        LOGGER.debug("Finding CompositeOtoParent by id: {}", compositeotoparentId);
        try {
            return this.wmGenericDao.findById(compositeotoparentId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeOtoParent found with id: {}", compositeotoparentId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositeOtoParent> findByMultipleIds(List<CompositeOtoParentId> compositeotoparentIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeOtoParents by ids: {}", compositeotoparentIds);

        return this.wmGenericDao.findByMultipleIds(compositeotoparentIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoParent update(CompositeOtoParent compositeOtoParent) {
        LOGGER.debug("Updating CompositeOtoParent with information: {}", compositeOtoParent);

        this.wmGenericDao.update(compositeOtoParent);
        this.wmGenericDao.refresh(compositeOtoParent);

        return compositeOtoParent;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOtoParent delete(CompositeOtoParentId compositeotoparentId) {
        LOGGER.debug("Deleting CompositeOtoParent with id: {}", compositeotoparentId);
        CompositeOtoParent deleted = this.wmGenericDao.findById(compositeotoparentId);
        if (deleted == null) {
            LOGGER.debug("No CompositeOtoParent found with id: {}", compositeotoparentId);
            throw new EntityNotFoundException(String.valueOf(compositeotoparentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositeOtoParent compositeOtoParent) {
        LOGGER.debug("Deleting CompositeOtoParent with {}", compositeOtoParent);
        this.wmGenericDao.delete(compositeOtoParent);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOtoParent> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOtoParents");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOtoParent> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOtoParents");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOtoParent to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOtoParent to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}