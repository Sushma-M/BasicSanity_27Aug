/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneUp;


/**
 * ServiceImpl object for domain model class OneToOneUp.
 *
 * @see OneToOneUp
 */
@Service("TestingDB_SQL.OneToOneUpService")
@Validated
public class OneToOneUpServiceImpl implements OneToOneUpService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToOneUpServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.OneToOneUpDao")
    private WMGenericDao<OneToOneUp, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OneToOneUp, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUp create(OneToOneUp oneToOneUp) {
        LOGGER.debug("Creating a new OneToOneUp with information: {}", oneToOneUp);

        OneToOneUp oneToOneUpCreated = this.wmGenericDao.create(oneToOneUp);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(oneToOneUpCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUp getById(Integer onetooneupId) {
        LOGGER.debug("Finding OneToOneUp by id: {}", onetooneupId);
        return this.wmGenericDao.findById(onetooneupId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUp findById(Integer onetooneupId) {
        LOGGER.debug("Finding OneToOneUp by id: {}", onetooneupId);
        try {
            return this.wmGenericDao.findById(onetooneupId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OneToOneUp found with id: {}", onetooneupId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OneToOneUp> findByMultipleIds(List<Integer> onetooneupIds, boolean orderedReturn) {
        LOGGER.debug("Finding OneToOneUps by ids: {}", onetooneupIds);

        return this.wmGenericDao.findByMultipleIds(onetooneupIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUp update(OneToOneUp oneToOneUp) {
        LOGGER.debug("Updating OneToOneUp with information: {}", oneToOneUp);

        this.wmGenericDao.update(oneToOneUp);
        this.wmGenericDao.refresh(oneToOneUp);

        return oneToOneUp;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUp delete(Integer onetooneupId) {
        LOGGER.debug("Deleting OneToOneUp with id: {}", onetooneupId);
        OneToOneUp deleted = this.wmGenericDao.findById(onetooneupId);
        if (deleted == null) {
            LOGGER.debug("No OneToOneUp found with id: {}", onetooneupId);
            throw new EntityNotFoundException(String.valueOf(onetooneupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OneToOneUp oneToOneUp) {
        LOGGER.debug("Deleting OneToOneUp with {}", oneToOneUp);
        this.wmGenericDao.delete(oneToOneUp);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneUp> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneUps");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneUp> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneUps");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneUp to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneUp to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}