/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.CompositeOneToOneChild;
import com.basicsanity.testingdb_sql.CompositeOneToOneParentId;


/**
 * ServiceImpl object for domain model class CompositeOneToOneChild.
 *
 * @see CompositeOneToOneChild
 */
@Service("TestingDB_SQL.CompositeOneToOneChildService")
@Validated
public class CompositeOneToOneChildServiceImpl implements CompositeOneToOneChildService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOneToOneChildServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.CompositeOneToOneChildDao")
    private WMGenericDao<CompositeOneToOneChild, CompositeOneToOneParentId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompositeOneToOneChild, CompositeOneToOneParentId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToOneChild create(CompositeOneToOneChild compositeOneToOneChild) {
        LOGGER.debug("Creating a new CompositeOneToOneChild with information: {}", compositeOneToOneChild);

        CompositeOneToOneChild compositeOneToOneChildCreated = this.wmGenericDao.create(compositeOneToOneChild);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(compositeOneToOneChildCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToOneChild getById(CompositeOneToOneParentId compositeonetoonechildId) {
        LOGGER.debug("Finding CompositeOneToOneChild by id: {}", compositeonetoonechildId);
        return this.wmGenericDao.findById(compositeonetoonechildId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToOneChild findById(CompositeOneToOneParentId compositeonetoonechildId) {
        LOGGER.debug("Finding CompositeOneToOneChild by id: {}", compositeonetoonechildId);
        try {
            return this.wmGenericDao.findById(compositeonetoonechildId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No CompositeOneToOneChild found with id: {}", compositeonetoonechildId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<CompositeOneToOneChild> findByMultipleIds(List<CompositeOneToOneParentId> compositeonetoonechildIds, boolean orderedReturn) {
        LOGGER.debug("Finding CompositeOneToOneChilds by ids: {}", compositeonetoonechildIds);

        return this.wmGenericDao.findByMultipleIds(compositeonetoonechildIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToOneChild update(CompositeOneToOneChild compositeOneToOneChild) {
        LOGGER.debug("Updating CompositeOneToOneChild with information: {}", compositeOneToOneChild);

        this.wmGenericDao.update(compositeOneToOneChild);
        this.wmGenericDao.refresh(compositeOneToOneChild);

        return compositeOneToOneChild;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public CompositeOneToOneChild delete(CompositeOneToOneParentId compositeonetoonechildId) {
        LOGGER.debug("Deleting CompositeOneToOneChild with id: {}", compositeonetoonechildId);
        CompositeOneToOneChild deleted = this.wmGenericDao.findById(compositeonetoonechildId);
        if (deleted == null) {
            LOGGER.debug("No CompositeOneToOneChild found with id: {}", compositeonetoonechildId);
            throw new EntityNotFoundException(String.valueOf(compositeonetoonechildId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(CompositeOneToOneChild compositeOneToOneChild) {
        LOGGER.debug("Deleting CompositeOneToOneChild with {}", compositeOneToOneChild);
        this.wmGenericDao.delete(compositeOneToOneChild);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToOneChild> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOneToOneChilds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<CompositeOneToOneChild> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CompositeOneToOneChilds");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOneToOneChild to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table CompositeOneToOneChild to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}