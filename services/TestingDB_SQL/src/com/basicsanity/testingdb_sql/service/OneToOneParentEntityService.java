/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneParentEntity;

/**
 * Service object for domain model class {@link OneToOneParentEntity}.
 */
public interface OneToOneParentEntityService {

    /**
     * Creates a new OneToOneParentEntity. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneParentEntity if any.
     *
     * @param oneToOneParentEntity Details of the OneToOneParentEntity to be created; value cannot be null.
     * @return The newly created OneToOneParentEntity.
     */
    OneToOneParentEntity create(@Valid OneToOneParentEntity oneToOneParentEntity);


	/**
     * Returns OneToOneParentEntity by given id if exists.
     *
     * @param onetooneparententityId The id of the OneToOneParentEntity to get; value cannot be null.
     * @return OneToOneParentEntity associated with the given onetooneparententityId.
	 * @throws EntityNotFoundException If no OneToOneParentEntity is found.
     */
    OneToOneParentEntity getById(Integer onetooneparententityId);

    /**
     * Find and return the OneToOneParentEntity by given id if exists, returns null otherwise.
     *
     * @param onetooneparententityId The id of the OneToOneParentEntity to get; value cannot be null.
     * @return OneToOneParentEntity associated with the given onetooneparententityId.
     */
    OneToOneParentEntity findById(Integer onetooneparententityId);

	/**
     * Find and return the list of OneToOneParentEntities by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param onetooneparententityIds The id's of the OneToOneParentEntity to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OneToOneParentEntities associated with the given onetooneparententityIds.
     */
    List<OneToOneParentEntity> findByMultipleIds(List<Integer> onetooneparententityIds, boolean orderedReturn);


    /**
     * Updates the details of an existing OneToOneParentEntity. It replaces all fields of the existing OneToOneParentEntity with the given oneToOneParentEntity.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneParentEntity if any.
     *
     * @param oneToOneParentEntity The details of the OneToOneParentEntity to be updated; value cannot be null.
     * @return The updated OneToOneParentEntity.
     * @throws EntityNotFoundException if no OneToOneParentEntity is found with given input.
     */
    OneToOneParentEntity update(@Valid OneToOneParentEntity oneToOneParentEntity);

    /**
     * Deletes an existing OneToOneParentEntity with the given id.
     *
     * @param onetooneparententityId The id of the OneToOneParentEntity to be deleted; value cannot be null.
     * @return The deleted OneToOneParentEntity.
     * @throws EntityNotFoundException if no OneToOneParentEntity found with the given id.
     */
    OneToOneParentEntity delete(Integer onetooneparententityId);

    /**
     * Deletes an existing OneToOneParentEntity with the given object.
     *
     * @param oneToOneParentEntity The instance of the OneToOneParentEntity to be deleted; value cannot be null.
     */
    void delete(OneToOneParentEntity oneToOneParentEntity);

    /**
     * Find all OneToOneParentEntities matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneParentEntities.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OneToOneParentEntity> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OneToOneParentEntities matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneParentEntities.
     *
     * @see Pageable
     * @see Page
     */
    Page<OneToOneParentEntity> findAll(String query, Pageable pageable);

    /**
     * Exports all OneToOneParentEntities matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OneToOneParentEntities matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OneToOneParentEntities in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OneToOneParentEntity.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}