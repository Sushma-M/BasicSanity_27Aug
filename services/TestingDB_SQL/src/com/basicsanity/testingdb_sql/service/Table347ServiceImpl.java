/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.Table347;


/**
 * ServiceImpl object for domain model class Table347.
 *
 * @see Table347
 */
@Service("TestingDB_SQL.Table347Service")
@Validated
public class Table347ServiceImpl implements Table347Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table347ServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.Table347Dao")
    private WMGenericDao<Table347, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table347, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table347 create(Table347 table347) {
        LOGGER.debug("Creating a new Table347 with information: {}", table347);

        Table347 table347Created = this.wmGenericDao.create(table347);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table347Created);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table347 getById(Integer table347Id) {
        LOGGER.debug("Finding Table347 by id: {}", table347Id);
        return this.wmGenericDao.findById(table347Id);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table347 findById(Integer table347Id) {
        LOGGER.debug("Finding Table347 by id: {}", table347Id);
        try {
            return this.wmGenericDao.findById(table347Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table347 found with id: {}", table347Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<Table347> findByMultipleIds(List<Integer> table347Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table347s by ids: {}", table347Ids);

        return this.wmGenericDao.findByMultipleIds(table347Ids, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table347 getByColumn2(String column2) {
        Map<String, Object> column2Map = new HashMap<>();
        column2Map.put("column2", column2);

        LOGGER.debug("Finding Table347 by unique keys: {}", column2Map);
        return this.wmGenericDao.findByUniqueKey(column2Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public Table347 update(Table347 table347) {
        LOGGER.debug("Updating Table347 with information: {}", table347);

        this.wmGenericDao.update(table347);
        this.wmGenericDao.refresh(table347);

        return table347;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public Table347 delete(Integer table347Id) {
        LOGGER.debug("Deleting Table347 with id: {}", table347Id);
        Table347 deleted = this.wmGenericDao.findById(table347Id);
        if (deleted == null) {
            LOGGER.debug("No Table347 found with id: {}", table347Id);
            throw new EntityNotFoundException(String.valueOf(table347Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(Table347 table347) {
        LOGGER.debug("Deleting Table347 with {}", table347);
        this.wmGenericDao.delete(table347);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table347> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table347s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Table347> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table347s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table347 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table Table347 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}