/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneUc;

/**
 * Service object for domain model class {@link OneToOneUc}.
 */
public interface OneToOneUcService {

    /**
     * Creates a new OneToOneUc. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneUc if any.
     *
     * @param oneToOneUc Details of the OneToOneUc to be created; value cannot be null.
     * @return The newly created OneToOneUc.
     */
    OneToOneUc create(@Valid OneToOneUc oneToOneUc);


	/**
     * Returns OneToOneUc by given id if exists.
     *
     * @param onetooneucId The id of the OneToOneUc to get; value cannot be null.
     * @return OneToOneUc associated with the given onetooneucId.
	 * @throws EntityNotFoundException If no OneToOneUc is found.
     */
    OneToOneUc getById(Integer onetooneucId);

    /**
     * Find and return the OneToOneUc by given id if exists, returns null otherwise.
     *
     * @param onetooneucId The id of the OneToOneUc to get; value cannot be null.
     * @return OneToOneUc associated with the given onetooneucId.
     */
    OneToOneUc findById(Integer onetooneucId);

	/**
     * Find and return the list of OneToOneUcs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param onetooneucIds The id's of the OneToOneUc to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return OneToOneUcs associated with the given onetooneucIds.
     */
    List<OneToOneUc> findByMultipleIds(List<Integer> onetooneucIds, boolean orderedReturn);

    /**
     * Find and return the OneToOneUc for given uniqueParentId  if exists.
     *
     * @param uniqueParentId value of uniqueParentId; value cannot be null.
     * @return OneToOneUc associated with the given inputs.
     * @throws EntityNotFoundException if no matching OneToOneUc found.
     */
    OneToOneUc getByUniqueParentId(Integer uniqueParentId);

    /**
     * Updates the details of an existing OneToOneUc. It replaces all fields of the existing OneToOneUc with the given oneToOneUc.
     *
     * This method overrides the input field values using Server side or database managed properties defined on OneToOneUc if any.
     *
     * @param oneToOneUc The details of the OneToOneUc to be updated; value cannot be null.
     * @return The updated OneToOneUc.
     * @throws EntityNotFoundException if no OneToOneUc is found with given input.
     */
    OneToOneUc update(@Valid OneToOneUc oneToOneUc);

    /**
     * Deletes an existing OneToOneUc with the given id.
     *
     * @param onetooneucId The id of the OneToOneUc to be deleted; value cannot be null.
     * @return The deleted OneToOneUc.
     * @throws EntityNotFoundException if no OneToOneUc found with the given id.
     */
    OneToOneUc delete(Integer onetooneucId);

    /**
     * Deletes an existing OneToOneUc with the given object.
     *
     * @param oneToOneUc The instance of the OneToOneUc to be deleted; value cannot be null.
     */
    void delete(OneToOneUc oneToOneUc);

    /**
     * Find all OneToOneUcs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneUcs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<OneToOneUc> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all OneToOneUcs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching OneToOneUcs.
     *
     * @see Pageable
     * @see Page
     */
    Page<OneToOneUc> findAll(String query, Pageable pageable);

    /**
     * Exports all OneToOneUcs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all OneToOneUcs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the OneToOneUcs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the OneToOneUc.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}