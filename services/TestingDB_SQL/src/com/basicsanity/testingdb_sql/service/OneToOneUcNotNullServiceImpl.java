/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.OneToOneUcNotNull;


/**
 * ServiceImpl object for domain model class OneToOneUcNotNull.
 *
 * @see OneToOneUcNotNull
 */
@Service("TestingDB_SQL.OneToOneUcNotNullService")
@Validated
public class OneToOneUcNotNullServiceImpl implements OneToOneUcNotNullService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToOneUcNotNullServiceImpl.class);


    @Autowired
    @Qualifier("TestingDB_SQL.OneToOneUcNotNullDao")
    private WMGenericDao<OneToOneUcNotNull, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OneToOneUcNotNull, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUcNotNull create(OneToOneUcNotNull oneToOneUcNotNull) {
        LOGGER.debug("Creating a new OneToOneUcNotNull with information: {}", oneToOneUcNotNull);

        OneToOneUcNotNull oneToOneUcNotNullCreated = this.wmGenericDao.create(oneToOneUcNotNull);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(oneToOneUcNotNullCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUcNotNull getById(Integer onetooneucnotnullId) {
        LOGGER.debug("Finding OneToOneUcNotNull by id: {}", onetooneucnotnullId);
        return this.wmGenericDao.findById(onetooneucnotnullId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUcNotNull findById(Integer onetooneucnotnullId) {
        LOGGER.debug("Finding OneToOneUcNotNull by id: {}", onetooneucnotnullId);
        try {
            return this.wmGenericDao.findById(onetooneucnotnullId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No OneToOneUcNotNull found with id: {}", onetooneucnotnullId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<OneToOneUcNotNull> findByMultipleIds(List<Integer> onetooneucnotnullIds, boolean orderedReturn) {
        LOGGER.debug("Finding OneToOneUcNotNulls by ids: {}", onetooneucnotnullIds);

        return this.wmGenericDao.findByMultipleIds(onetooneucnotnullIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUcNotNull getByColumn3(int column3) {
        Map<String, Object> column3Map = new HashMap<>();
        column3Map.put("column3", column3);

        LOGGER.debug("Finding OneToOneUcNotNull by unique keys: {}", column3Map);
        return this.wmGenericDao.findByUniqueKey(column3Map);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUcNotNull update(OneToOneUcNotNull oneToOneUcNotNull) {
        LOGGER.debug("Updating OneToOneUcNotNull with information: {}", oneToOneUcNotNull);

        this.wmGenericDao.update(oneToOneUcNotNull);
        this.wmGenericDao.refresh(oneToOneUcNotNull);

        return oneToOneUcNotNull;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public OneToOneUcNotNull delete(Integer onetooneucnotnullId) {
        LOGGER.debug("Deleting OneToOneUcNotNull with id: {}", onetooneucnotnullId);
        OneToOneUcNotNull deleted = this.wmGenericDao.findById(onetooneucnotnullId);
        if (deleted == null) {
            LOGGER.debug("No OneToOneUcNotNull found with id: {}", onetooneucnotnullId);
            throw new EntityNotFoundException(String.valueOf(onetooneucnotnullId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(OneToOneUcNotNull oneToOneUcNotNull) {
        LOGGER.debug("Deleting OneToOneUcNotNull with {}", oneToOneUcNotNull);
        this.wmGenericDao.delete(oneToOneUcNotNull);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneUcNotNull> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneUcNotNulls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<OneToOneUcNotNull> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OneToOneUcNotNulls");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneUcNotNull to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table OneToOneUcNotNull to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}