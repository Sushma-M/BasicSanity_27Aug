/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.basicsanity.testingdb_sql.JoiningDetails;
import com.basicsanity.testingdb_sql.SalaryDetails;
import com.basicsanity.testingdb_sql.UserDetails;


/**
 * ServiceImpl object for domain model class UserDetails.
 *
 * @see UserDetails
 */
@Service("TestingDB_SQL.UserDetailsService")
@Validated
public class UserDetailsServiceImpl implements UserDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDetailsServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.SalaryDetailsService")
    private SalaryDetailsService salaryDetailsService;

    @Lazy
    @Autowired
    @Qualifier("TestingDB_SQL.JoiningDetailsService")
    private JoiningDetailsService joiningDetailsService;

    @Autowired
    @Qualifier("TestingDB_SQL.UserDetailsDao")
    private WMGenericDao<UserDetails, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserDetails, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public UserDetails create(UserDetails userDetails) {
        LOGGER.debug("Creating a new UserDetails with information: {}", userDetails);

        UserDetails userDetailsCreated = this.wmGenericDao.create(userDetails);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(userDetailsCreated);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public UserDetails getById(String userdetailsId) {
        LOGGER.debug("Finding UserDetails by id: {}", userdetailsId);
        return this.wmGenericDao.findById(userdetailsId);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public UserDetails findById(String userdetailsId) {
        LOGGER.debug("Finding UserDetails by id: {}", userdetailsId);
        try {
            return this.wmGenericDao.findById(userdetailsId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No UserDetails found with id: {}", userdetailsId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public List<UserDetails> findByMultipleIds(List<String> userdetailsIds, boolean orderedReturn) {
        LOGGER.debug("Finding UserDetails by ids: {}", userdetailsIds);

        return this.wmGenericDao.findByMultipleIds(userdetailsIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "TestingDB_SQLTransactionManager")
    @Override
    public UserDetails update(UserDetails userDetails) {
        LOGGER.debug("Updating UserDetails with information: {}", userDetails);

        this.wmGenericDao.update(userDetails);
        this.wmGenericDao.refresh(userDetails);

        return userDetails;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public UserDetails delete(String userdetailsId) {
        LOGGER.debug("Deleting UserDetails with id: {}", userdetailsId);
        UserDetails deleted = this.wmGenericDao.findById(userdetailsId);
        if (deleted == null) {
            LOGGER.debug("No UserDetails found with id: {}", userdetailsId);
            throw new EntityNotFoundException(String.valueOf(userdetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "TestingDB_SQLTransactionManager")
    @Override
    public void delete(UserDetails userDetails) {
        LOGGER.debug("Deleting UserDetails with {}", userDetails);
        this.wmGenericDao.delete(userDetails);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<UserDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<UserDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table UserDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service TestingDB_SQL for table UserDetails to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<JoiningDetails> findAssociatedJoiningDetailses(String userDataId, Pageable pageable) {
        LOGGER.debug("Fetching all associated joiningDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userDetailsByUserDetails.userDataId = '" + userDataId + "'");

        return joiningDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "TestingDB_SQLTransactionManager")
    @Override
    public Page<SalaryDetails> findAssociatedSalaryDetailses(String userDataId, Pageable pageable) {
        LOGGER.debug("Fetching all associated salaryDetailses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("userDetails.userDataId = '" + userDataId + "'");

        return salaryDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service SalaryDetailsService instance
     */
    protected void setSalaryDetailsService(SalaryDetailsService service) {
        this.salaryDetailsService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service JoiningDetailsService instance
     */
    protected void setJoiningDetailsService(JoiningDetailsService service) {
        this.joiningDetailsService = service;
    }

}