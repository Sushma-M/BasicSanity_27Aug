/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * VirtualOneToManyParent generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Virtual One to Many Parent`", uniqueConstraints = {
            @UniqueConstraint(name = "`UK_Virtual_One_to_Many_PbkxCw`", columnNames = {"`Virtual ID`"})})
@IdClass(VirtualOneToManyParentId.class)
public class VirtualOneToManyParent implements Serializable {

    private String virtualName;
    private Date virtualId;
    private String virtualDesc;

    @Id
    @Column(name = "`Virtual Name`", nullable = true, length = 255)
    public String getVirtualName() {
        return this.virtualName;
    }

    public void setVirtualName(String virtualName) {
        this.virtualName = virtualName;
    }

    @Id
    @Column(name = "`Virtual ID`", nullable = true)
    public Date getVirtualId() {
        return this.virtualId;
    }

    public void setVirtualId(Date virtualId) {
        this.virtualId = virtualId;
    }

    @Id
    @Column(name = "`Virtual Desc`", nullable = true, length = 2147483647)
    public String getVirtualDesc() {
        return this.virtualDesc;
    }

    public void setVirtualDesc(String virtualDesc) {
        this.virtualDesc = virtualDesc;
    }



    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof VirtualOneToManyParent)) return false;
        final VirtualOneToManyParent virtualOneToManyParent = (VirtualOneToManyParent) o;
        return Objects.equals(getVirtualName(), virtualOneToManyParent.getVirtualName()) &&
                Objects.equals(getVirtualId(), virtualOneToManyParent.getVirtualId()) &&
                Objects.equals(getVirtualDesc(), virtualOneToManyParent.getVirtualDesc());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getVirtualName(),
                getVirtualId(),
                getVirtualDesc());
    }
}