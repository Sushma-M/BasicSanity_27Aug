/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.AllTypesDefaultValues2;
import com.basicsanity.testingdb_sql.service.AllTypesDefaultValues2Service;


/**
 * Controller object for domain model class AllTypesDefaultValues2.
 * @see AllTypesDefaultValues2
 */
@RestController("TestingDB_SQL.AllTypesDefaultValues2Controller")
@Api(value = "AllTypesDefaultValues2Controller", description = "Exposes APIs to work with AllTypesDefaultValues2 resource.")
@RequestMapping("/TestingDB_SQL/AllTypesDefaultValues2")
public class AllTypesDefaultValues2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesDefaultValues2Controller.class);

    @Autowired
	@Qualifier("TestingDB_SQL.AllTypesDefaultValues2Service")
	private AllTypesDefaultValues2Service allTypesDefaultValues2Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AllTypesDefaultValues2 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesDefaultValues2 createAllTypesDefaultValues2(@RequestPart("wm_data_json") AllTypesDefaultValues2 allTypesDefaultValues2, @RequestPart(value = "blobColumn", required = false) MultipartFile _blobColumn) {
		LOGGER.debug("Create AllTypesDefaultValues2 with information: {}" , allTypesDefaultValues2);

    allTypesDefaultValues2.setBlobColumn(WMMultipartUtils.toByteArray(_blobColumn));
		allTypesDefaultValues2 = allTypesDefaultValues2Service.create(allTypesDefaultValues2);
		LOGGER.debug("Created AllTypesDefaultValues2 with information: {}" , allTypesDefaultValues2);

	    return allTypesDefaultValues2;
	}

    @ApiOperation(value = "Returns the AllTypesDefaultValues2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesDefaultValues2 getAllTypesDefaultValues2(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AllTypesDefaultValues2 with id: {}" , id);

        AllTypesDefaultValues2 foundAllTypesDefaultValues2 = allTypesDefaultValues2Service.getById(id);
        LOGGER.debug("AllTypesDefaultValues2 details with id: {}" , foundAllTypesDefaultValues2);

        return foundAllTypesDefaultValues2;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AllTypesDefaultValues2 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getAllTypesDefaultValues2BLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AllTypesDefaultValues2 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AllTypesDefaultValues2.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        AllTypesDefaultValues2 allTypesDefaultValues2 = allTypesDefaultValues2Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(allTypesDefaultValues2, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the AllTypesDefaultValues2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesDefaultValues2 editAllTypesDefaultValues2(@PathVariable("id") Integer id, @RequestBody AllTypesDefaultValues2 allTypesDefaultValues2) {
        LOGGER.debug("Editing AllTypesDefaultValues2 with id: {}" , allTypesDefaultValues2.getAllTypesId());

        allTypesDefaultValues2.setAllTypesId(id);
        allTypesDefaultValues2 = allTypesDefaultValues2Service.update(allTypesDefaultValues2);
        LOGGER.debug("AllTypesDefaultValues2 details with id: {}" , allTypesDefaultValues2);

        return allTypesDefaultValues2;
    }

    @ApiOperation(value = "Updates the AllTypesDefaultValues2 instance associated with the given id.This API should be used when AllTypesDefaultValues2 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesDefaultValues2 editAllTypesDefaultValues2(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        AllTypesDefaultValues2 newAllTypesDefaultValues2 = WMMultipartUtils.toObject(multipartHttpServletRequest, AllTypesDefaultValues2.class, "TestingDB_SQL");
        newAllTypesDefaultValues2.setAllTypesId(id);

        AllTypesDefaultValues2 oldAllTypesDefaultValues2 = allTypesDefaultValues2Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldAllTypesDefaultValues2, newAllTypesDefaultValues2);
        LOGGER.debug("Updating AllTypesDefaultValues2 with information: {}" , newAllTypesDefaultValues2);

        return allTypesDefaultValues2Service.update(newAllTypesDefaultValues2);
    }

    @ApiOperation(value = "Deletes the AllTypesDefaultValues2 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAllTypesDefaultValues2(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AllTypesDefaultValues2 with id: {}" , id);

        AllTypesDefaultValues2 deletedAllTypesDefaultValues2 = allTypesDefaultValues2Service.delete(id);

        return deletedAllTypesDefaultValues2 != null;
    }

    /**
     * @deprecated Use {@link #findAllTypesDefaultValues2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AllTypesDefaultValues2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypesDefaultValues2> searchAllTypesDefaultValues2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllTypesDefaultValues2s list by query filter:{}", (Object) queryFilters);
        return allTypesDefaultValues2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllTypesDefaultValues2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypesDefaultValues2> findAllTypesDefaultValues2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypesDefaultValues2s list by filter:", query);
        return allTypesDefaultValues2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllTypesDefaultValues2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypesDefaultValues2> filterAllTypesDefaultValues2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypesDefaultValues2s list by filter", query);
        return allTypesDefaultValues2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllTypesDefaultValues2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return allTypesDefaultValues2Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAllTypesDefaultValues2sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AllTypesDefaultValues2.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> allTypesDefaultValues2Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AllTypesDefaultValues2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAllTypesDefaultValues2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AllTypesDefaultValues2s");
		return allTypesDefaultValues2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAllTypesDefaultValues2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return allTypesDefaultValues2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllTypesDefaultValues2Service instance
	 */
	protected void setAllTypesDefaultValues2Service(AllTypesDefaultValues2Service service) {
		this.allTypesDefaultValues2Service = service;
	}

}