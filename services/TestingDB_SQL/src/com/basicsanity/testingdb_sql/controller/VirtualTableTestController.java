/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.VirtualTableTest;
import com.basicsanity.testingdb_sql.VirtualTableTestId;
import com.basicsanity.testingdb_sql.service.VirtualTableTestService;


/**
 * Controller object for domain model class VirtualTableTest.
 * @see VirtualTableTest
 */
@RestController("TestingDB_SQL.VirtualTableTestController")
@Api(value = "VirtualTableTestController", description = "Exposes APIs to work with VirtualTableTest resource.")
@RequestMapping("/TestingDB_SQL/VirtualTableTest")
public class VirtualTableTestController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualTableTestController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.VirtualTableTestService")
	private VirtualTableTestService virtualTableTestService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualTableTest instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTableTest createVirtualTableTest(@RequestBody VirtualTableTest virtualTableTest) {
		LOGGER.debug("Create VirtualTableTest with information: {}" , virtualTableTest);

		virtualTableTest = virtualTableTestService.create(virtualTableTest);
		LOGGER.debug("Created VirtualTableTest with information: {}" , virtualTableTest);

	    return virtualTableTest;
	}

    @ApiOperation(value = "Returns the VirtualTableTest instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTableTest getVirtualTableTest(@RequestParam("id") String id, @RequestParam("column3") String column3, @RequestParam("column4") String column4) {

        VirtualTableTestId virtualtabletestId = new VirtualTableTestId();
        virtualtabletestId.setId(id);
        virtualtabletestId.setColumn3(column3);
        virtualtabletestId.setColumn4(column4);

        LOGGER.debug("Getting VirtualTableTest with id: {}" , virtualtabletestId);
        VirtualTableTest virtualTableTest = virtualTableTestService.getById(virtualtabletestId);
        LOGGER.debug("VirtualTableTest details with id: {}" , virtualTableTest);

        return virtualTableTest;
    }



    @ApiOperation(value = "Updates the VirtualTableTest instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTableTest editVirtualTableTest(@RequestParam("id") String id, @RequestParam("column3") String column3, @RequestParam("column4") String column4, @RequestBody VirtualTableTest virtualTableTest) {

        virtualTableTest.setId(id);
        virtualTableTest.setColumn3(column3);
        virtualTableTest.setColumn4(column4);

        LOGGER.debug("VirtualTableTest details with id is updated with: {}" , virtualTableTest);

        return virtualTableTestService.update(virtualTableTest);
    }


    @ApiOperation(value = "Deletes the VirtualTableTest instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualTableTest(@RequestParam("id") String id, @RequestParam("column3") String column3, @RequestParam("column4") String column4) {

        VirtualTableTestId virtualtabletestId = new VirtualTableTestId();
        virtualtabletestId.setId(id);
        virtualtabletestId.setColumn3(column3);
        virtualtabletestId.setColumn4(column4);

        LOGGER.debug("Deleting VirtualTableTest with id: {}" , virtualtabletestId);
        VirtualTableTest virtualTableTest = virtualTableTestService.delete(virtualtabletestId);

        return virtualTableTest != null;
    }


    @RequestMapping(value = "/id/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching VirtualTableTest with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTableTest getByUniqueKeyId(@PathVariable("id") String id) {
        LOGGER.debug("Getting VirtualTableTest with uniques key UniqueKeyId");
        return virtualTableTestService.getByUniqueKeyId(id);
    }

    /**
     * @deprecated Use {@link #findVirtualTableTests(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualTableTest instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualTableTest> searchVirtualTableTestsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualTableTests list by query filter:{}", (Object) queryFilters);
        return virtualTableTestService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualTableTest instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualTableTest> findVirtualTableTests(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualTableTests list by filter:", query);
        return virtualTableTestService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualTableTest instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualTableTest> filterVirtualTableTests(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualTableTests list by filter", query);
        return virtualTableTestService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualTableTests(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualTableTestService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualTableTestsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualTableTest.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualTableTestService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualTableTest instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualTableTests( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualTableTests");
		return virtualTableTestService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualTableTestAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualTableTestService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualTableTestService instance
	 */
	protected void setVirtualTableTestService(VirtualTableTestService service) {
		this.virtualTableTestService = service;
	}

}