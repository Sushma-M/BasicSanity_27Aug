/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.VirtualOnaToOnaParent;
import com.basicsanity.testingdb_sql.VirtualOnaToOnaParentId;
import com.basicsanity.testingdb_sql.service.VirtualOnaToOnaParentService;


/**
 * Controller object for domain model class VirtualOnaToOnaParent.
 * @see VirtualOnaToOnaParent
 */
@RestController("TestingDB_SQL.VirtualOnaToOnaParentController")
@Api(value = "VirtualOnaToOnaParentController", description = "Exposes APIs to work with VirtualOnaToOnaParent resource.")
@RequestMapping("/TestingDB_SQL/VirtualOnaToOnaParent")
public class VirtualOnaToOnaParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOnaToOnaParentController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.VirtualOnaToOnaParentService")
	private VirtualOnaToOnaParentService virtualOnaToOnaParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualOnaToOnaParent instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOnaToOnaParent createVirtualOnaToOnaParent(@RequestBody VirtualOnaToOnaParent virtualOnaToOnaParent) {
		LOGGER.debug("Create VirtualOnaToOnaParent with information: {}" , virtualOnaToOnaParent);

		virtualOnaToOnaParent = virtualOnaToOnaParentService.create(virtualOnaToOnaParent);
		LOGGER.debug("Created VirtualOnaToOnaParent with information: {}" , virtualOnaToOnaParent);

	    return virtualOnaToOnaParent;
	}

    @ApiOperation(value = "Returns the VirtualOnaToOnaParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOnaToOnaParent getVirtualOnaToOnaParent(@RequestParam("column3") String column3, @RequestParam("column2") Integer column2) {

        VirtualOnaToOnaParentId virtualonatoonaparentId = new VirtualOnaToOnaParentId();
        virtualonatoonaparentId.setColumn3(column3);
        virtualonatoonaparentId.setColumn2(column2);

        LOGGER.debug("Getting VirtualOnaToOnaParent with id: {}" , virtualonatoonaparentId);
        VirtualOnaToOnaParent virtualOnaToOnaParent = virtualOnaToOnaParentService.getById(virtualonatoonaparentId);
        LOGGER.debug("VirtualOnaToOnaParent details with id: {}" , virtualOnaToOnaParent);

        return virtualOnaToOnaParent;
    }



    @ApiOperation(value = "Updates the VirtualOnaToOnaParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOnaToOnaParent editVirtualOnaToOnaParent(@RequestParam("column3") String column3, @RequestParam("column2") Integer column2, @RequestBody VirtualOnaToOnaParent virtualOnaToOnaParent) {

        virtualOnaToOnaParent.setColumn3(column3);
        virtualOnaToOnaParent.setColumn2(column2);

        LOGGER.debug("VirtualOnaToOnaParent details with id is updated with: {}" , virtualOnaToOnaParent);

        return virtualOnaToOnaParentService.update(virtualOnaToOnaParent);
    }


    @ApiOperation(value = "Deletes the VirtualOnaToOnaParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualOnaToOnaParent(@RequestParam("column3") String column3, @RequestParam("column2") Integer column2) {

        VirtualOnaToOnaParentId virtualonatoonaparentId = new VirtualOnaToOnaParentId();
        virtualonatoonaparentId.setColumn3(column3);
        virtualonatoonaparentId.setColumn2(column2);

        LOGGER.debug("Deleting VirtualOnaToOnaParent with id: {}" , virtualonatoonaparentId);
        VirtualOnaToOnaParent virtualOnaToOnaParent = virtualOnaToOnaParentService.delete(virtualonatoonaparentId);

        return virtualOnaToOnaParent != null;
    }


    /**
     * @deprecated Use {@link #findVirtualOnaToOnaParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualOnaToOnaParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOnaToOnaParent> searchVirtualOnaToOnaParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualOnaToOnaParents list by query filter:{}", (Object) queryFilters);
        return virtualOnaToOnaParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOnaToOnaParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOnaToOnaParent> findVirtualOnaToOnaParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOnaToOnaParents list by filter:", query);
        return virtualOnaToOnaParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOnaToOnaParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOnaToOnaParent> filterVirtualOnaToOnaParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOnaToOnaParents list by filter", query);
        return virtualOnaToOnaParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualOnaToOnaParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualOnaToOnaParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualOnaToOnaParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualOnaToOnaParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualOnaToOnaParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualOnaToOnaParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualOnaToOnaParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualOnaToOnaParents");
		return virtualOnaToOnaParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualOnaToOnaParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualOnaToOnaParentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualOnaToOnaParentService instance
	 */
	protected void setVirtualOnaToOnaParentService(VirtualOnaToOnaParentService service) {
		this.virtualOnaToOnaParentService = service;
	}

}