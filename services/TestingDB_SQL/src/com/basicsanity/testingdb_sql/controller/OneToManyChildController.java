/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.OneToManyChild;
import com.basicsanity.testingdb_sql.service.OneToManyChildService;


/**
 * Controller object for domain model class OneToManyChild.
 * @see OneToManyChild
 */
@RestController("TestingDB_SQL.OneToManyChildController")
@Api(value = "OneToManyChildController", description = "Exposes APIs to work with OneToManyChild resource.")
@RequestMapping("/TestingDB_SQL/OneToManyChild")
public class OneToManyChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToManyChildController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.OneToManyChildService")
	private OneToManyChildService oneToManyChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new OneToManyChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OneToManyChild createOneToManyChild(@RequestBody OneToManyChild oneToManyChild) {
		LOGGER.debug("Create OneToManyChild with information: {}" , oneToManyChild);

		oneToManyChild = oneToManyChildService.create(oneToManyChild);
		LOGGER.debug("Created OneToManyChild with information: {}" , oneToManyChild);

	    return oneToManyChild;
	}

    @ApiOperation(value = "Returns the OneToManyChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OneToManyChild getOneToManyChild(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting OneToManyChild with id: {}" , id);

        OneToManyChild foundOneToManyChild = oneToManyChildService.getById(id);
        LOGGER.debug("OneToManyChild details with id: {}" , foundOneToManyChild);

        return foundOneToManyChild;
    }

    @ApiOperation(value = "Updates the OneToManyChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OneToManyChild editOneToManyChild(@PathVariable("id") Integer id, @RequestBody OneToManyChild oneToManyChild) {
        LOGGER.debug("Editing OneToManyChild with id: {}" , oneToManyChild.getChildPkColumn());

        oneToManyChild.setChildPkColumn(id);
        oneToManyChild = oneToManyChildService.update(oneToManyChild);
        LOGGER.debug("OneToManyChild details with id: {}" , oneToManyChild);

        return oneToManyChild;
    }

    @ApiOperation(value = "Deletes the OneToManyChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOneToManyChild(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting OneToManyChild with id: {}" , id);

        OneToManyChild deletedOneToManyChild = oneToManyChildService.delete(id);

        return deletedOneToManyChild != null;
    }

    /**
     * @deprecated Use {@link #findOneToManyChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OneToManyChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OneToManyChild> searchOneToManyChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OneToManyChilds list by query filter:{}", (Object) queryFilters);
        return oneToManyChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OneToManyChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OneToManyChild> findOneToManyChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OneToManyChilds list by filter:", query);
        return oneToManyChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OneToManyChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OneToManyChild> filterOneToManyChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OneToManyChilds list by filter", query);
        return oneToManyChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOneToManyChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return oneToManyChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOneToManyChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = OneToManyChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> oneToManyChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of OneToManyChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOneToManyChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OneToManyChilds");
		return oneToManyChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOneToManyChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return oneToManyChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OneToManyChildService instance
	 */
	protected void setOneToManyChildService(OneToManyChildService service) {
		this.oneToManyChildService = service;
	}

}