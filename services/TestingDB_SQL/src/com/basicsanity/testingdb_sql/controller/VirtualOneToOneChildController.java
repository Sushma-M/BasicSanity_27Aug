/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.VirtualOneToOneChild;
import com.basicsanity.testingdb_sql.VirtualOneToOneChildId;
import com.basicsanity.testingdb_sql.service.VirtualOneToOneChildService;


/**
 * Controller object for domain model class VirtualOneToOneChild.
 * @see VirtualOneToOneChild
 */
@RestController("TestingDB_SQL.VirtualOneToOneChildController")
@Api(value = "VirtualOneToOneChildController", description = "Exposes APIs to work with VirtualOneToOneChild resource.")
@RequestMapping("/TestingDB_SQL/VirtualOneToOneChild")
public class VirtualOneToOneChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOneToOneChildController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.VirtualOneToOneChildService")
	private VirtualOneToOneChildService virtualOneToOneChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualOneToOneChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneChild createVirtualOneToOneChild(@RequestBody VirtualOneToOneChild virtualOneToOneChild) {
		LOGGER.debug("Create VirtualOneToOneChild with information: {}" , virtualOneToOneChild);

		virtualOneToOneChild = virtualOneToOneChildService.create(virtualOneToOneChild);
		LOGGER.debug("Created VirtualOneToOneChild with information: {}" , virtualOneToOneChild);

	    return virtualOneToOneChild;
	}

    @ApiOperation(value = "Returns the VirtualOneToOneChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneChild getVirtualOneToOneChild(@RequestParam("virtualOneToOneParent") Integer virtualOneToOneParent, @RequestParam("virtualDate") String virtualDate, @RequestParam("virtualBoolean") Boolean virtualBoolean) {

        VirtualOneToOneChildId virtualonetoonechildId = new VirtualOneToOneChildId();
        virtualonetoonechildId.setVirtualOneToOneParent(virtualOneToOneParent);
        virtualonetoonechildId.setVirtualDate(virtualDate);
        virtualonetoonechildId.setVirtualBoolean(virtualBoolean);

        LOGGER.debug("Getting VirtualOneToOneChild with id: {}" , virtualonetoonechildId);
        VirtualOneToOneChild virtualOneToOneChild = virtualOneToOneChildService.getById(virtualonetoonechildId);
        LOGGER.debug("VirtualOneToOneChild details with id: {}" , virtualOneToOneChild);

        return virtualOneToOneChild;
    }



    @ApiOperation(value = "Updates the VirtualOneToOneChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneChild editVirtualOneToOneChild(@RequestParam("virtualOneToOneParent") Integer virtualOneToOneParent, @RequestParam("virtualDate") String virtualDate, @RequestParam("virtualBoolean") Boolean virtualBoolean, @RequestBody VirtualOneToOneChild virtualOneToOneChild) {

        virtualOneToOneChild.setVirtualOneToOneParent(virtualOneToOneParent);
        virtualOneToOneChild.setVirtualDate(virtualDate);
        virtualOneToOneChild.setVirtualBoolean(virtualBoolean);

        LOGGER.debug("VirtualOneToOneChild details with id is updated with: {}" , virtualOneToOneChild);

        return virtualOneToOneChildService.update(virtualOneToOneChild);
    }


    @ApiOperation(value = "Deletes the VirtualOneToOneChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualOneToOneChild(@RequestParam("virtualOneToOneParent") Integer virtualOneToOneParent, @RequestParam("virtualDate") String virtualDate, @RequestParam("virtualBoolean") Boolean virtualBoolean) {

        VirtualOneToOneChildId virtualonetoonechildId = new VirtualOneToOneChildId();
        virtualonetoonechildId.setVirtualOneToOneParent(virtualOneToOneParent);
        virtualonetoonechildId.setVirtualDate(virtualDate);
        virtualonetoonechildId.setVirtualBoolean(virtualBoolean);

        LOGGER.debug("Deleting VirtualOneToOneChild with id: {}" , virtualonetoonechildId);
        VirtualOneToOneChild virtualOneToOneChild = virtualOneToOneChildService.delete(virtualonetoonechildId);

        return virtualOneToOneChild != null;
    }


    @RequestMapping(value = "/virtualOneToOneParent/{virtualOneToOneParent}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching VirtualOneToOneChild with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneChild getByVirtualOneToOneParent(@PathVariable("virtualOneToOneParent") Integer virtualOneToOneParent) {
        LOGGER.debug("Getting VirtualOneToOneChild with uniques key VirtualOneToOneParent");
        return virtualOneToOneChildService.getByVirtualOneToOneParent(virtualOneToOneParent);
    }

    /**
     * @deprecated Use {@link #findVirtualOneToOneChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualOneToOneChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOneToOneChild> searchVirtualOneToOneChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualOneToOneChilds list by query filter:{}", (Object) queryFilters);
        return virtualOneToOneChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOneToOneChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOneToOneChild> findVirtualOneToOneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOneToOneChilds list by filter:", query);
        return virtualOneToOneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOneToOneChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOneToOneChild> filterVirtualOneToOneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOneToOneChilds list by filter", query);
        return virtualOneToOneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualOneToOneChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualOneToOneChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualOneToOneChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualOneToOneChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualOneToOneChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualOneToOneChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualOneToOneChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualOneToOneChilds");
		return virtualOneToOneChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualOneToOneChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualOneToOneChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualOneToOneChildService instance
	 */
	protected void setVirtualOneToOneChildService(VirtualOneToOneChildService service) {
		this.virtualOneToOneChildService = service;
	}

}