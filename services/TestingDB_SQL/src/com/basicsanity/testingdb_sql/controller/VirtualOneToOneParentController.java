/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.VirtualOneToOneParent;
import com.basicsanity.testingdb_sql.VirtualOneToOneParentId;
import com.basicsanity.testingdb_sql.service.VirtualOneToOneParentService;


/**
 * Controller object for domain model class VirtualOneToOneParent.
 * @see VirtualOneToOneParent
 */
@RestController("TestingDB_SQL.VirtualOneToOneParentController")
@Api(value = "VirtualOneToOneParentController", description = "Exposes APIs to work with VirtualOneToOneParent resource.")
@RequestMapping("/TestingDB_SQL/VirtualOneToOneParent")
public class VirtualOneToOneParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualOneToOneParentController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.VirtualOneToOneParentService")
	private VirtualOneToOneParentService virtualOneToOneParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualOneToOneParent instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneParent createVirtualOneToOneParent(@RequestBody VirtualOneToOneParent virtualOneToOneParent) {
		LOGGER.debug("Create VirtualOneToOneParent with information: {}" , virtualOneToOneParent);

		virtualOneToOneParent = virtualOneToOneParentService.create(virtualOneToOneParent);
		LOGGER.debug("Created VirtualOneToOneParent with information: {}" , virtualOneToOneParent);

	    return virtualOneToOneParent;
	}

    @ApiOperation(value = "Returns the VirtualOneToOneParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneParent getVirtualOneToOneParent(@RequestParam("virtualId") Integer virtualId, @RequestParam("virtualName") String virtualName, @RequestParam("virtualDesc") String virtualDesc) {

        VirtualOneToOneParentId virtualonetooneparentId = new VirtualOneToOneParentId();
        virtualonetooneparentId.setVirtualId(virtualId);
        virtualonetooneparentId.setVirtualName(virtualName);
        virtualonetooneparentId.setVirtualDesc(virtualDesc);

        LOGGER.debug("Getting VirtualOneToOneParent with id: {}" , virtualonetooneparentId);
        VirtualOneToOneParent virtualOneToOneParent = virtualOneToOneParentService.getById(virtualonetooneparentId);
        LOGGER.debug("VirtualOneToOneParent details with id: {}" , virtualOneToOneParent);

        return virtualOneToOneParent;
    }



    @ApiOperation(value = "Updates the VirtualOneToOneParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneParent editVirtualOneToOneParent(@RequestParam("virtualId") Integer virtualId, @RequestParam("virtualName") String virtualName, @RequestParam("virtualDesc") String virtualDesc, @RequestBody VirtualOneToOneParent virtualOneToOneParent) {

        virtualOneToOneParent.setVirtualId(virtualId);
        virtualOneToOneParent.setVirtualName(virtualName);
        virtualOneToOneParent.setVirtualDesc(virtualDesc);

        LOGGER.debug("VirtualOneToOneParent details with id is updated with: {}" , virtualOneToOneParent);

        return virtualOneToOneParentService.update(virtualOneToOneParent);
    }


    @ApiOperation(value = "Deletes the VirtualOneToOneParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualOneToOneParent(@RequestParam("virtualId") Integer virtualId, @RequestParam("virtualName") String virtualName, @RequestParam("virtualDesc") String virtualDesc) {

        VirtualOneToOneParentId virtualonetooneparentId = new VirtualOneToOneParentId();
        virtualonetooneparentId.setVirtualId(virtualId);
        virtualonetooneparentId.setVirtualName(virtualName);
        virtualonetooneparentId.setVirtualDesc(virtualDesc);

        LOGGER.debug("Deleting VirtualOneToOneParent with id: {}" , virtualonetooneparentId);
        VirtualOneToOneParent virtualOneToOneParent = virtualOneToOneParentService.delete(virtualonetooneparentId);

        return virtualOneToOneParent != null;
    }


    @RequestMapping(value = "/virtualId/{virtualId}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching VirtualOneToOneParent with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualOneToOneParent getByVirtualId(@PathVariable("virtualId") Integer virtualId) {
        LOGGER.debug("Getting VirtualOneToOneParent with uniques key VirtualId");
        return virtualOneToOneParentService.getByVirtualId(virtualId);
    }

    /**
     * @deprecated Use {@link #findVirtualOneToOneParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualOneToOneParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOneToOneParent> searchVirtualOneToOneParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualOneToOneParents list by query filter:{}", (Object) queryFilters);
        return virtualOneToOneParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOneToOneParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOneToOneParent> findVirtualOneToOneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOneToOneParents list by filter:", query);
        return virtualOneToOneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualOneToOneParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualOneToOneParent> filterVirtualOneToOneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualOneToOneParents list by filter", query);
        return virtualOneToOneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualOneToOneParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualOneToOneParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualOneToOneParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualOneToOneParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualOneToOneParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualOneToOneParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualOneToOneParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualOneToOneParents");
		return virtualOneToOneParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualOneToOneParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualOneToOneParentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualOneToOneParentService instance
	 */
	protected void setVirtualOneToOneParentService(VirtualOneToOneParentService service) {
		this.virtualOneToOneParentService = service;
	}

}