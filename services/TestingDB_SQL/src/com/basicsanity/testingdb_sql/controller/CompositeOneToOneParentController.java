/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.CompositeOneToOneParent;
import com.basicsanity.testingdb_sql.CompositeOneToOneParentId;
import com.basicsanity.testingdb_sql.service.CompositeOneToOneParentService;


/**
 * Controller object for domain model class CompositeOneToOneParent.
 * @see CompositeOneToOneParent
 */
@RestController("TestingDB_SQL.CompositeOneToOneParentController")
@Api(value = "CompositeOneToOneParentController", description = "Exposes APIs to work with CompositeOneToOneParent resource.")
@RequestMapping("/TestingDB_SQL/CompositeOneToOneParent")
public class CompositeOneToOneParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOneToOneParentController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.CompositeOneToOneParentService")
	private CompositeOneToOneParentService compositeOneToOneParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CompositeOneToOneParent instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeOneToOneParent createCompositeOneToOneParent(@RequestBody CompositeOneToOneParent compositeOneToOneParent) {
		LOGGER.debug("Create CompositeOneToOneParent with information: {}" , compositeOneToOneParent);

		compositeOneToOneParent = compositeOneToOneParentService.create(compositeOneToOneParent);
		LOGGER.debug("Created CompositeOneToOneParent with information: {}" , compositeOneToOneParent);

	    return compositeOneToOneParent;
	}

    @ApiOperation(value = "Returns the CompositeOneToOneParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeOneToOneParent getCompositeOneToOneParent(@RequestParam("compId") Integer compId, @RequestParam("compName") String compName) {

        CompositeOneToOneParentId compositeonetooneparentId = new CompositeOneToOneParentId();
        compositeonetooneparentId.setCompId(compId);
        compositeonetooneparentId.setCompName(compName);

        LOGGER.debug("Getting CompositeOneToOneParent with id: {}" , compositeonetooneparentId);
        CompositeOneToOneParent compositeOneToOneParent = compositeOneToOneParentService.getById(compositeonetooneparentId);
        LOGGER.debug("CompositeOneToOneParent details with id: {}" , compositeOneToOneParent);

        return compositeOneToOneParent;
    }



    @ApiOperation(value = "Updates the CompositeOneToOneParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeOneToOneParent editCompositeOneToOneParent(@RequestParam("compId") Integer compId, @RequestParam("compName") String compName, @RequestBody CompositeOneToOneParent compositeOneToOneParent) {

        compositeOneToOneParent.setCompId(compId);
        compositeOneToOneParent.setCompName(compName);

        LOGGER.debug("CompositeOneToOneParent details with id is updated with: {}" , compositeOneToOneParent);

        return compositeOneToOneParentService.update(compositeOneToOneParent);
    }


    @ApiOperation(value = "Deletes the CompositeOneToOneParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompositeOneToOneParent(@RequestParam("compId") Integer compId, @RequestParam("compName") String compName) {

        CompositeOneToOneParentId compositeonetooneparentId = new CompositeOneToOneParentId();
        compositeonetooneparentId.setCompId(compId);
        compositeonetooneparentId.setCompName(compName);

        LOGGER.debug("Deleting CompositeOneToOneParent with id: {}" , compositeonetooneparentId);
        CompositeOneToOneParent compositeOneToOneParent = compositeOneToOneParentService.delete(compositeonetooneparentId);

        return compositeOneToOneParent != null;
    }


    /**
     * @deprecated Use {@link #findCompositeOneToOneParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompositeOneToOneParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeOneToOneParent> searchCompositeOneToOneParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompositeOneToOneParents list by query filter:{}", (Object) queryFilters);
        return compositeOneToOneParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeOneToOneParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeOneToOneParent> findCompositeOneToOneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeOneToOneParents list by filter:", query);
        return compositeOneToOneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeOneToOneParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeOneToOneParent> filterCompositeOneToOneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeOneToOneParents list by filter", query);
        return compositeOneToOneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompositeOneToOneParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compositeOneToOneParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCompositeOneToOneParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CompositeOneToOneParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> compositeOneToOneParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CompositeOneToOneParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompositeOneToOneParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompositeOneToOneParents");
		return compositeOneToOneParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompositeOneToOneParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compositeOneToOneParentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompositeOneToOneParentService instance
	 */
	protected void setCompositeOneToOneParentService(CompositeOneToOneParentService service) {
		this.compositeOneToOneParentService = service;
	}

}