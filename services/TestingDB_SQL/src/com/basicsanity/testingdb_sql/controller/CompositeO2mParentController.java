/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.CompositeO2mChild;
import com.basicsanity.testingdb_sql.CompositeO2mParent;
import com.basicsanity.testingdb_sql.CompositeO2mParentId;
import com.basicsanity.testingdb_sql.service.CompositeO2mParentService;


/**
 * Controller object for domain model class CompositeO2mParent.
 * @see CompositeO2mParent
 */
@RestController("TestingDB_SQL.CompositeO2mParentController")
@Api(value = "CompositeO2mParentController", description = "Exposes APIs to work with CompositeO2mParent resource.")
@RequestMapping("/TestingDB_SQL/CompositeO2mParent")
public class CompositeO2mParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeO2mParentController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.CompositeO2mParentService")
	private CompositeO2mParentService compositeO2mParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CompositeO2mParent instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeO2mParent createCompositeO2mParent(@RequestBody CompositeO2mParent compositeO2mParent) {
		LOGGER.debug("Create CompositeO2mParent with information: {}" , compositeO2mParent);

		compositeO2mParent = compositeO2mParentService.create(compositeO2mParent);
		LOGGER.debug("Created CompositeO2mParent with information: {}" , compositeO2mParent);

	    return compositeO2mParent;
	}

    @ApiOperation(value = "Returns the CompositeO2mParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeO2mParent getCompositeO2mParent(@RequestParam("id") Integer id, @RequestParam("column2") String column2) {

        CompositeO2mParentId compositeo2mparentId = new CompositeO2mParentId();
        compositeo2mparentId.setId(id);
        compositeo2mparentId.setColumn2(column2);

        LOGGER.debug("Getting CompositeO2mParent with id: {}" , compositeo2mparentId);
        CompositeO2mParent compositeO2mParent = compositeO2mParentService.getById(compositeo2mparentId);
        LOGGER.debug("CompositeO2mParent details with id: {}" , compositeO2mParent);

        return compositeO2mParent;
    }



    @ApiOperation(value = "Updates the CompositeO2mParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeO2mParent editCompositeO2mParent(@RequestParam("id") Integer id, @RequestParam("column2") String column2, @RequestBody CompositeO2mParent compositeO2mParent) {

        compositeO2mParent.setId(id);
        compositeO2mParent.setColumn2(column2);

        LOGGER.debug("CompositeO2mParent details with id is updated with: {}" , compositeO2mParent);

        return compositeO2mParentService.update(compositeO2mParent);
    }


    @ApiOperation(value = "Deletes the CompositeO2mParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompositeO2mParent(@RequestParam("id") Integer id, @RequestParam("column2") String column2) {

        CompositeO2mParentId compositeo2mparentId = new CompositeO2mParentId();
        compositeo2mparentId.setId(id);
        compositeo2mparentId.setColumn2(column2);

        LOGGER.debug("Deleting CompositeO2mParent with id: {}" , compositeo2mparentId);
        CompositeO2mParent compositeO2mParent = compositeO2mParentService.delete(compositeo2mparentId);

        return compositeO2mParent != null;
    }


    /**
     * @deprecated Use {@link #findCompositeO2mParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompositeO2mParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeO2mParent> searchCompositeO2mParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompositeO2mParents list by query filter:{}", (Object) queryFilters);
        return compositeO2mParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeO2mParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeO2mParent> findCompositeO2mParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeO2mParents list by filter:", query);
        return compositeO2mParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeO2mParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeO2mParent> filterCompositeO2mParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeO2mParents list by filter", query);
        return compositeO2mParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompositeO2mParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compositeO2mParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCompositeO2mParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CompositeO2mParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> compositeO2mParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CompositeO2mParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompositeO2mParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompositeO2mParents");
		return compositeO2mParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompositeO2mParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compositeO2mParentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/compositeO2mChilds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compositeO2mChilds instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeO2mChild> findAssociatedCompositeO2mChilds(@RequestParam("id") Integer id, @RequestParam("column2") String column2, Pageable pageable) {

        LOGGER.debug("Fetching all associated compositeO2mChilds");
        return compositeO2mParentService.findAssociatedCompositeO2mChilds(id, column2, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompositeO2mParentService instance
	 */
	protected void setCompositeO2mParentService(CompositeO2mParentService service) {
		this.compositeO2mParentService = service;
	}

}