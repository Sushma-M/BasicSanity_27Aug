/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.VirtualTable;
import com.basicsanity.testingdb_sql.VirtualTableId;
import com.basicsanity.testingdb_sql.service.VirtualTableService;


/**
 * Controller object for domain model class VirtualTable.
 * @see VirtualTable
 */
@RestController("TestingDB_SQL.VirtualTableController")
@Api(value = "VirtualTableController", description = "Exposes APIs to work with VirtualTable resource.")
@RequestMapping("/TestingDB_SQL/VirtualTable")
public class VirtualTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualTableController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.VirtualTableService")
	private VirtualTableService virtualTableService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new VirtualTable instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTable createVirtualTable(@RequestBody VirtualTable virtualTable) {
		LOGGER.debug("Create VirtualTable with information: {}" , virtualTable);

		virtualTable = virtualTableService.create(virtualTable);
		LOGGER.debug("Created VirtualTable with information: {}" , virtualTable);

	    return virtualTable;
	}

    @ApiOperation(value = "Returns the VirtualTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTable getVirtualTable(@RequestParam("id") Integer id, @RequestParam("description") String description, @RequestParam("testColumn") String testColumn, @RequestParam("name") String name) {

        VirtualTableId virtualtableId = new VirtualTableId();
        virtualtableId.setId(id);
        virtualtableId.setDescription(description);
        virtualtableId.setTestColumn(testColumn);
        virtualtableId.setName(name);

        LOGGER.debug("Getting VirtualTable with id: {}" , virtualtableId);
        VirtualTable virtualTable = virtualTableService.getById(virtualtableId);
        LOGGER.debug("VirtualTable details with id: {}" , virtualTable);

        return virtualTable;
    }



    @ApiOperation(value = "Updates the VirtualTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VirtualTable editVirtualTable(@RequestParam("id") Integer id, @RequestParam("description") String description, @RequestParam("testColumn") String testColumn, @RequestParam("name") String name, @RequestBody VirtualTable virtualTable) {

        virtualTable.setId(id);
        virtualTable.setDescription(description);
        virtualTable.setTestColumn(testColumn);
        virtualTable.setName(name);

        LOGGER.debug("VirtualTable details with id is updated with: {}" , virtualTable);

        return virtualTableService.update(virtualTable);
    }


    @ApiOperation(value = "Deletes the VirtualTable instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVirtualTable(@RequestParam("id") Integer id, @RequestParam("description") String description, @RequestParam("testColumn") String testColumn, @RequestParam("name") String name) {

        VirtualTableId virtualtableId = new VirtualTableId();
        virtualtableId.setId(id);
        virtualtableId.setDescription(description);
        virtualtableId.setTestColumn(testColumn);
        virtualtableId.setName(name);

        LOGGER.debug("Deleting VirtualTable with id: {}" , virtualtableId);
        VirtualTable virtualTable = virtualTableService.delete(virtualtableId);

        return virtualTable != null;
    }


    /**
     * @deprecated Use {@link #findVirtualTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VirtualTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualTable> searchVirtualTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VirtualTables list by query filter:{}", (Object) queryFilters);
        return virtualTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualTable> findVirtualTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualTables list by filter:", query);
        return virtualTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VirtualTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VirtualTable> filterVirtualTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VirtualTables list by filter", query);
        return virtualTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVirtualTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return virtualTableService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVirtualTablesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = VirtualTable.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> virtualTableService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of VirtualTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVirtualTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VirtualTables");
		return virtualTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVirtualTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return virtualTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VirtualTableService instance
	 */
	protected void setVirtualTableService(VirtualTableService service) {
		this.virtualTableService = service;
	}

}