/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.CompositeOtoChild;
import com.basicsanity.testingdb_sql.CompositeOtoParentId;
import com.basicsanity.testingdb_sql.service.CompositeOtoChildService;


/**
 * Controller object for domain model class CompositeOtoChild.
 * @see CompositeOtoChild
 */
@RestController("TestingDB_SQL.CompositeOtoChildController")
@Api(value = "CompositeOtoChildController", description = "Exposes APIs to work with CompositeOtoChild resource.")
@RequestMapping("/TestingDB_SQL/CompositeOtoChild")
public class CompositeOtoChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositeOtoChildController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.CompositeOtoChildService")
	private CompositeOtoChildService compositeOtoChildService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CompositeOtoChild instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeOtoChild createCompositeOtoChild(@RequestBody CompositeOtoChild compositeOtoChild) {
		LOGGER.debug("Create CompositeOtoChild with information: {}" , compositeOtoChild);

		compositeOtoChild = compositeOtoChildService.create(compositeOtoChild);
		LOGGER.debug("Created CompositeOtoChild with information: {}" , compositeOtoChild);

	    return compositeOtoChild;
	}

    @ApiOperation(value = "Returns the CompositeOtoChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeOtoChild getCompositeOtoChild(@RequestParam("id") Integer id, @RequestParam("column2") String column2) {

        CompositeOtoParentId compositeotochildId = new CompositeOtoParentId();
        compositeotochildId.setId(id);
        compositeotochildId.setColumn2(column2);

        LOGGER.debug("Getting CompositeOtoChild with id: {}" , compositeotochildId);
        CompositeOtoChild compositeOtoChild = compositeOtoChildService.getById(compositeotochildId);
        LOGGER.debug("CompositeOtoChild details with id: {}" , compositeOtoChild);

        return compositeOtoChild;
    }



    @ApiOperation(value = "Updates the CompositeOtoChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositeOtoChild editCompositeOtoChild(@RequestParam("id") Integer id, @RequestParam("column2") String column2, @RequestBody CompositeOtoChild compositeOtoChild) {

        compositeOtoChild.setId(id);
        compositeOtoChild.setColumn2(column2);

        LOGGER.debug("CompositeOtoChild details with id is updated with: {}" , compositeOtoChild);

        return compositeOtoChildService.update(compositeOtoChild);
    }


    @ApiOperation(value = "Deletes the CompositeOtoChild instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompositeOtoChild(@RequestParam("id") Integer id, @RequestParam("column2") String column2) {

        CompositeOtoParentId compositeotochildId = new CompositeOtoParentId();
        compositeotochildId.setId(id);
        compositeotochildId.setColumn2(column2);

        LOGGER.debug("Deleting CompositeOtoChild with id: {}" , compositeotochildId);
        CompositeOtoChild compositeOtoChild = compositeOtoChildService.delete(compositeotochildId);

        return compositeOtoChild != null;
    }


    /**
     * @deprecated Use {@link #findCompositeOtoChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompositeOtoChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeOtoChild> searchCompositeOtoChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompositeOtoChilds list by query filter:{}", (Object) queryFilters);
        return compositeOtoChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeOtoChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeOtoChild> findCompositeOtoChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeOtoChilds list by filter:", query);
        return compositeOtoChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositeOtoChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositeOtoChild> filterCompositeOtoChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositeOtoChilds list by filter", query);
        return compositeOtoChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompositeOtoChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compositeOtoChildService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCompositeOtoChildsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CompositeOtoChild.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> compositeOtoChildService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CompositeOtoChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompositeOtoChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompositeOtoChilds");
		return compositeOtoChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompositeOtoChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compositeOtoChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompositeOtoChildService instance
	 */
	protected void setCompositeOtoChildService(CompositeOtoChildService service) {
		this.compositeOtoChildService = service;
	}

}