/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.OneToOneUpNotNull;
import com.basicsanity.testingdb_sql.service.OneToOneUpNotNullService;


/**
 * Controller object for domain model class OneToOneUpNotNull.
 * @see OneToOneUpNotNull
 */
@RestController("TestingDB_SQL.OneToOneUpNotNullController")
@Api(value = "OneToOneUpNotNullController", description = "Exposes APIs to work with OneToOneUpNotNull resource.")
@RequestMapping("/TestingDB_SQL/OneToOneUpNotNull")
public class OneToOneUpNotNullController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OneToOneUpNotNullController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.OneToOneUpNotNullService")
	private OneToOneUpNotNullService oneToOneUpNotNullService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new OneToOneUpNotNull instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OneToOneUpNotNull createOneToOneUpNotNull(@RequestBody OneToOneUpNotNull oneToOneUpNotNull) {
		LOGGER.debug("Create OneToOneUpNotNull with information: {}" , oneToOneUpNotNull);

		oneToOneUpNotNull = oneToOneUpNotNullService.create(oneToOneUpNotNull);
		LOGGER.debug("Created OneToOneUpNotNull with information: {}" , oneToOneUpNotNull);

	    return oneToOneUpNotNull;
	}

    @ApiOperation(value = "Returns the OneToOneUpNotNull instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OneToOneUpNotNull getOneToOneUpNotNull(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting OneToOneUpNotNull with id: {}" , id);

        OneToOneUpNotNull foundOneToOneUpNotNull = oneToOneUpNotNullService.getById(id);
        LOGGER.debug("OneToOneUpNotNull details with id: {}" , foundOneToOneUpNotNull);

        return foundOneToOneUpNotNull;
    }

    @ApiOperation(value = "Updates the OneToOneUpNotNull instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OneToOneUpNotNull editOneToOneUpNotNull(@PathVariable("id") Integer id, @RequestBody OneToOneUpNotNull oneToOneUpNotNull) {
        LOGGER.debug("Editing OneToOneUpNotNull with id: {}" , oneToOneUpNotNull.getId());

        oneToOneUpNotNull.setId(id);
        oneToOneUpNotNull = oneToOneUpNotNullService.update(oneToOneUpNotNull);
        LOGGER.debug("OneToOneUpNotNull details with id: {}" , oneToOneUpNotNull);

        return oneToOneUpNotNull;
    }

    @ApiOperation(value = "Deletes the OneToOneUpNotNull instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOneToOneUpNotNull(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting OneToOneUpNotNull with id: {}" , id);

        OneToOneUpNotNull deletedOneToOneUpNotNull = oneToOneUpNotNullService.delete(id);

        return deletedOneToOneUpNotNull != null;
    }

    /**
     * @deprecated Use {@link #findOneToOneUpNotNulls(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OneToOneUpNotNull instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OneToOneUpNotNull> searchOneToOneUpNotNullsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OneToOneUpNotNulls list by query filter:{}", (Object) queryFilters);
        return oneToOneUpNotNullService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OneToOneUpNotNull instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OneToOneUpNotNull> findOneToOneUpNotNulls(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OneToOneUpNotNulls list by filter:", query);
        return oneToOneUpNotNullService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OneToOneUpNotNull instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OneToOneUpNotNull> filterOneToOneUpNotNulls(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OneToOneUpNotNulls list by filter", query);
        return oneToOneUpNotNullService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOneToOneUpNotNulls(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return oneToOneUpNotNullService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOneToOneUpNotNullsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = OneToOneUpNotNull.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> oneToOneUpNotNullService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of OneToOneUpNotNull instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOneToOneUpNotNulls( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OneToOneUpNotNulls");
		return oneToOneUpNotNullService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOneToOneUpNotNullAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return oneToOneUpNotNullService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OneToOneUpNotNullService instance
	 */
	protected void setOneToOneUpNotNullService(OneToOneUpNotNullService service) {
		this.oneToOneUpNotNullService = service;
	}

}