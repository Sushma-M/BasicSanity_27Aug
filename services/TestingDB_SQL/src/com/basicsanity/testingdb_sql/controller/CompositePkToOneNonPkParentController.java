/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.basicsanity.testingdb_sql.CompositePkToNonPkChild;
import com.basicsanity.testingdb_sql.CompositePkToOneNonPkParent;
import com.basicsanity.testingdb_sql.CompositePkToOneNonPkParentId;
import com.basicsanity.testingdb_sql.service.CompositePkToOneNonPkParentService;


/**
 * Controller object for domain model class CompositePkToOneNonPkParent.
 * @see CompositePkToOneNonPkParent
 */
@RestController("TestingDB_SQL.CompositePkToOneNonPkParentController")
@Api(value = "CompositePkToOneNonPkParentController", description = "Exposes APIs to work with CompositePkToOneNonPkParent resource.")
@RequestMapping("/TestingDB_SQL/CompositePkToOneNonPkParent")
public class CompositePkToOneNonPkParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompositePkToOneNonPkParentController.class);

    @Autowired
	@Qualifier("TestingDB_SQL.CompositePkToOneNonPkParentService")
	private CompositePkToOneNonPkParentService compositePkToOneNonPkParentService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CompositePkToOneNonPkParent instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositePkToOneNonPkParent createCompositePkToOneNonPkParent(@RequestPart("wm_data_json") CompositePkToOneNonPkParent compositePkToOneNonPkParent, @RequestPart(value = "blobColumn", required = false) MultipartFile _blobColumn) {
		LOGGER.debug("Create CompositePkToOneNonPkParent with information: {}" , compositePkToOneNonPkParent);

    compositePkToOneNonPkParent.setBlobColumn(WMMultipartUtils.toByteArray(_blobColumn));
		compositePkToOneNonPkParent = compositePkToOneNonPkParentService.create(compositePkToOneNonPkParent);
		LOGGER.debug("Created CompositePkToOneNonPkParent with information: {}" , compositePkToOneNonPkParent);

	    return compositePkToOneNonPkParent;
	}

    @ApiOperation(value = "Returns the CompositePkToOneNonPkParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositePkToOneNonPkParent getCompositePkToOneNonPkParent(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId) {

        CompositePkToOneNonPkParentId compositepktoonenonpkparentId = new CompositePkToOneNonPkParentId();
        compositepktoonenonpkparentId.setCreatedDate(createdDate);
        compositepktoonenonpkparentId.setCompositeId(compositeId);

        LOGGER.debug("Getting CompositePkToOneNonPkParent with id: {}" , compositepktoonenonpkparentId);
        CompositePkToOneNonPkParent compositePkToOneNonPkParent = compositePkToOneNonPkParentService.getById(compositepktoonenonpkparentId);
        LOGGER.debug("CompositePkToOneNonPkParent details with id: {}" , compositePkToOneNonPkParent);

        return compositePkToOneNonPkParent;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in CompositePkToOneNonPkParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getCompositePkToOneNonPkParentBLOBContent(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in CompositePkToOneNonPkParent instance" , fieldName);

        if(!WMRuntimeUtils.isLob(CompositePkToOneNonPkParent.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        CompositePkToOneNonPkParentId compositepktoonenonpkparentId = new CompositePkToOneNonPkParentId();
        compositepktoonenonpkparentId.setCreatedDate(createdDate);
        compositepktoonenonpkparentId.setCompositeId(compositeId);

        CompositePkToOneNonPkParent compositePkToOneNonPkParent = compositePkToOneNonPkParentService.getById(compositepktoonenonpkparentId);
        WMMultipartUtils.buildHttpResponseForBlob(compositePkToOneNonPkParent, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the CompositePkToOneNonPkParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositePkToOneNonPkParent editCompositePkToOneNonPkParent(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId, @RequestBody CompositePkToOneNonPkParent compositePkToOneNonPkParent) {

        compositePkToOneNonPkParent.setCreatedDate(createdDate);
        compositePkToOneNonPkParent.setCompositeId(compositeId);

        LOGGER.debug("CompositePkToOneNonPkParent details with id is updated with: {}" , compositePkToOneNonPkParent);

        return compositePkToOneNonPkParentService.update(compositePkToOneNonPkParent);
    }

    @ApiOperation(value = "Updates the CompositePkToOneNonPkParent instance associated with the given composite-id.This API should be used when CompositePkToOneNonPkParent instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositePkToOneNonPkParent editCompositePkToOneNonPkParent(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId, MultipartHttpServletRequest multipartHttpServletRequest) {
        return this.editCompositePkToOneNonPkParentAndMultiparts(createdDate, compositeId, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the CompositePkToOneNonPkParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CompositePkToOneNonPkParent editCompositePkToOneNonPkParentAndMultiparts(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId, MultipartHttpServletRequest multipartHttpServletRequest) { 

        CompositePkToOneNonPkParentId compositepktoonenonpkparentId = new CompositePkToOneNonPkParentId();
        compositepktoonenonpkparentId.setCreatedDate(createdDate);
        compositepktoonenonpkparentId.setCompositeId(compositeId);

        CompositePkToOneNonPkParent newCompositePkToOneNonPkParent = WMMultipartUtils.toObject(multipartHttpServletRequest, CompositePkToOneNonPkParent.class, "TestingDB_SQL");
        CompositePkToOneNonPkParent oldCompositePkToOneNonPkParent = compositePkToOneNonPkParentService.getById(compositepktoonenonpkparentId);

        WMMultipartUtils.updateLobsContent(oldCompositePkToOneNonPkParent, newCompositePkToOneNonPkParent);

        newCompositePkToOneNonPkParent.setCreatedDate(createdDate);
        newCompositePkToOneNonPkParent.setCompositeId(compositeId);

        LOGGER.debug("CompositePkToOneNonPkParent details with id is updated with: {}" , newCompositePkToOneNonPkParent);

        return compositePkToOneNonPkParentService.update(newCompositePkToOneNonPkParent);
    }


    @ApiOperation(value = "Deletes the CompositePkToOneNonPkParent instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCompositePkToOneNonPkParent(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId) {

        CompositePkToOneNonPkParentId compositepktoonenonpkparentId = new CompositePkToOneNonPkParentId();
        compositepktoonenonpkparentId.setCreatedDate(createdDate);
        compositepktoonenonpkparentId.setCompositeId(compositeId);

        LOGGER.debug("Deleting CompositePkToOneNonPkParent with id: {}" , compositepktoonenonpkparentId);
        CompositePkToOneNonPkParent compositePkToOneNonPkParent = compositePkToOneNonPkParentService.delete(compositepktoonenonpkparentId);

        return compositePkToOneNonPkParent != null;
    }


    /**
     * @deprecated Use {@link #findCompositePkToOneNonPkParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CompositePkToOneNonPkParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositePkToOneNonPkParent> searchCompositePkToOneNonPkParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CompositePkToOneNonPkParents list by query filter:{}", (Object) queryFilters);
        return compositePkToOneNonPkParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositePkToOneNonPkParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositePkToOneNonPkParent> findCompositePkToOneNonPkParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositePkToOneNonPkParents list by filter:", query);
        return compositePkToOneNonPkParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CompositePkToOneNonPkParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositePkToOneNonPkParent> filterCompositePkToOneNonPkParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CompositePkToOneNonPkParents list by filter", query);
        return compositePkToOneNonPkParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompositePkToOneNonPkParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return compositePkToOneNonPkParentService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportCompositePkToOneNonPkParentsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CompositePkToOneNonPkParent.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> compositePkToOneNonPkParentService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CompositePkToOneNonPkParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCompositePkToOneNonPkParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CompositePkToOneNonPkParents");
		return compositePkToOneNonPkParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCompositePkToOneNonPkParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return compositePkToOneNonPkParentService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/composite-id/compositePkToNonPkChilds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compositePkToNonPkChilds instance associated with the given composite-id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CompositePkToNonPkChild> findAssociatedCompositePkToNonPkChilds(@RequestParam("createdDate") Date createdDate, @RequestParam("compositeId") Integer compositeId, Pageable pageable) {

        LOGGER.debug("Fetching all associated compositePkToNonPkChilds");
        return compositePkToOneNonPkParentService.findAssociatedCompositePkToNonPkChilds(createdDate, compositeId, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CompositePkToOneNonPkParentService instance
	 */
	protected void setCompositePkToOneNonPkParentService(CompositePkToOneNonPkParentService service) {
		this.compositePkToOneNonPkParentService = service;
	}

}