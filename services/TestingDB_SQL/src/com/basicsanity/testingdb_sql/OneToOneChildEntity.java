/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * OneToOneChildEntity generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`OneToOne Child`")
public class OneToOneChildEntity implements Serializable {

    private Integer pkColumn;
    private Integer integerColumn;
    private String stringColumn;
    private OneToOneParentEntity oneToOneParentEntity;

    @Id
    @Column(name = "`PK Column`", nullable = false, scale = 0, precision = 10)
    public Integer getPkColumn() {
        return this.pkColumn;
    }

    public void setPkColumn(Integer pkColumn) {
        this.pkColumn = pkColumn;
    }

    @Column(name = "`Integer Column`", nullable = true, scale = 0, precision = 10)
    public Integer getIntegerColumn() {
        return this.integerColumn;
    }

    public void setIntegerColumn(Integer integerColumn) {
        this.integerColumn = integerColumn;
    }

    @Column(name = "`String Column`", nullable = true, length = 255)
    public String getStringColumn() {
        return this.stringColumn;
    }

    public void setStringColumn(String stringColumn) {
        this.stringColumn = stringColumn;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`PK Column`", referencedColumnName = "`PK Column`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_OneToOne_Child_TO_OneDOXFy`"))
    @Fetch(FetchMode.JOIN)
    public OneToOneParentEntity getOneToOneParentEntity() {
        return this.oneToOneParentEntity;
    }

    public void setOneToOneParentEntity(OneToOneParentEntity oneToOneParentEntity) {
        if(oneToOneParentEntity != null) {
            this.pkColumn = oneToOneParentEntity.getPkColumn();
        }

        this.oneToOneParentEntity = oneToOneParentEntity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof OneToOneChildEntity)) return false;
        final OneToOneChildEntity oneToOneChildEntity = (OneToOneChildEntity) o;
        return Objects.equals(getPkColumn(), oneToOneChildEntity.getPkColumn());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPkColumn());
    }
}