/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.basicsanity.testingdb_sql;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * CompositeOneToManyChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Composite One To Many Child`")
public class CompositeOneToManyChild implements Serializable {

    private Integer compChildId;
    private String createdBy;
    private Date compDate;
    private Integer compositeOneToManyParent;
    private CompositeOneToManyParent compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`Comp Child Id`", nullable = false, scale = 0, precision = 10)
    public Integer getCompChildId() {
        return this.compChildId;
    }

    public void setCompChildId(Integer compChildId) {
        this.compChildId = compChildId;
    }

    @Column(name = "`Created By`", nullable = true, length = 255)
    public String getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`Comp Date`", nullable = true)
    public Date getCompDate() {
        return this.compDate;
    }

    public void setCompDate(Date compDate) {
        this.compDate = compDate;
    }

    @Column(name = "`Composite One to Many Parent`", nullable = true, scale = 0, precision = 10)
    public Integer getCompositeOneToManyParent() {
        return this.compositeOneToManyParent;
    }

    public void setCompositeOneToManyParent(Integer compositeOneToManyParent) {
        this.compositeOneToManyParent = compositeOneToManyParent;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns(value = {
            @JoinColumn(name = "`Composite One to Many Parent`", referencedColumnName = "`Comp Id`", insertable = false, updatable = false),
            @JoinColumn(name = "`Created By`", referencedColumnName = "`Comp Name`", insertable = false, updatable = false)},
        foreignKey = @ForeignKey(name = "`FK_Composite_One_To_Manym04gD`"))
    @Fetch(FetchMode.JOIN)
    public CompositeOneToManyParent getCompositeOneToManyParentByCompositeOneToManyParentAndCreatedBy() {
        return this.compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy;
    }

    public void setCompositeOneToManyParentByCompositeOneToManyParentAndCreatedBy(CompositeOneToManyParent compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy) {
        if(compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy != null) {
            this.compositeOneToManyParent = compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy.getCompId();
            this.createdBy = compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy.getCompName();
        }

        this.compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy = compositeOneToManyParentByCompositeOneToManyParentAndCreatedBy;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof CompositeOneToManyChild)) return false;
        final CompositeOneToManyChild compositeOneToManyChild = (CompositeOneToManyChild) o;
        return Objects.equals(getCompChildId(), compositeOneToManyChild.getCompChildId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getCompChildId());
    }
}